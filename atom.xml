<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Johnny</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-05-26T03:47:58.791Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Johnny</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>kotlin惯用法</title>
    <link href="http://yoursite.com/2017/05/26/kotlin%E6%83%AF%E7%94%A8%E6%B3%95/"/>
    <id>http://yoursite.com/2017/05/26/kotlin惯用法/</id>
    <published>2017-05-26T02:01:03.000Z</published>
    <updated>2017-05-26T03:47:58.791Z</updated>
    
    <content type="html"><![CDATA[<p>kotlin提供了一些惯用法（语法糖？），简单的记录一下。</p>
<h2 id="data-class"><a href="#data-class" class="headerlink" title="data class"></a>data class</h2><p>有时候需要一些类要保存数据，而不需要其他操作，当然基本操作除外，kotlin为data class提供的基本操作有：</p>
<ul>
<li>equals() 相当与“==”操作</li>
<li>hashCode() 计算hash值</li>
<li>toString() 函数</li>
<li>componentsN() 函数</li>
<li>copy() 拷贝</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>(<span class="keyword">val</span> name: String = <span class="string">"nobody"</span>, <span class="keyword">val</span> age: <span class="built_in">Int</span> = <span class="number">0</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line">    <span class="comment">//默认参数</span></div><div class="line">    <span class="keyword">val</span> nobody = User()</div><div class="line">    <span class="comment">//User(name=nobody, age=0)</span></div><div class="line">    println(nobody)</div><div class="line">    </div><div class="line">    <span class="keyword">val</span> johnny = User(<span class="string">"Johnny"</span>, <span class="number">29</span>)</div><div class="line">    <span class="comment">//解构赋值</span></div><div class="line">    <span class="keyword">val</span> (name, age) = johnny</div><div class="line">    <span class="comment">//name: Johnny, age: 29</span></div><div class="line">    println(<span class="string">"name: <span class="subst">$name</span>, age: <span class="subst">$age</span>"</span>)</div><div class="line">    </div><div class="line">    <span class="comment">//toString用法</span></div><div class="line">    <span class="comment">//User(name=Johnny, age=29)</span></div><div class="line">    println(johnny)</div><div class="line">    </div><div class="line">    <span class="comment">//hashCode用法</span></div><div class="line">    <span class="comment">//233064103</span></div><div class="line">    println(johnny.hashCode())</div><div class="line">    </div><div class="line">    <span class="comment">//"==" 和"==="</span></div><div class="line">    <span class="comment">//true</span></div><div class="line">    println(<span class="string">"johnny == johnny  <span class="subst">$&#123;johnny == johnny&#125;</span>"</span>)</div><div class="line">    <span class="comment">//true</span></div><div class="line">    println(<span class="string">"johnny === johnny  <span class="subst">$&#123;johnny === johnny&#125;</span>"</span>)</div><div class="line">    </div><div class="line">    <span class="comment">//copy用法</span></div><div class="line">    <span class="keyword">val</span> youngJohnny = johnny.copy(age = <span class="number">2</span>)</div><div class="line">    <span class="comment">//"User(name=Johnny, age=2)"</span></div><div class="line">    println(youngJohnny)</div><div class="line">    <span class="comment">//false</span></div><div class="line">    println(<span class="string">"johnny == youngJohnny  <span class="subst">$&#123;johnny == youngJohnny&#125;</span>"</span>)</div><div class="line">    <span class="comment">//false</span></div><div class="line">    println(<span class="string">"johnny === youngJohnny  <span class="subst">$&#123;johnny === youngJohnny&#125;</span>"</span>)</div><div class="line">    <span class="comment">//false</span></div><div class="line">    println(<span class="string">"johnny.hashCode() == yongJohnny.hashCode() <span class="subst">$&#123;johnny.hashCode() == youngJohnny.hashCode()&#125;</span>"</span>)</div><div class="line">    </div><div class="line">    <span class="keyword">val</span> copyJohnny = johnny.copy()</div><div class="line">    <span class="comment">//true</span></div><div class="line">    println(<span class="string">"johnny == copyJohnny  <span class="subst">$&#123;johnny == copyJohnny&#125;</span>"</span>)</div><div class="line">    <span class="comment">//false</span></div><div class="line">    println(<span class="string">"johnny === copyJohnny  <span class="subst">$&#123;johnny === copyJohnny&#125;</span>"</span>)</div><div class="line">    <span class="comment">//true</span></div><div class="line">    println(<span class="string">"johnny.equals(copyJohnny)  <span class="subst">$&#123;johnny.equals(copyJohnny)&#125;</span>"</span>)</div><div class="line">    <span class="comment">//true</span></div><div class="line">    println(<span class="string">"johnny.hashCode() == copyJohnny.hashCode() <span class="subst">$&#123;johnny.hashCode() == copyJohnny.hashCode()&#125;</span>"</span>)</div><div class="line">    </div><div class="line">    <span class="keyword">val</span> anotherJohnny = User(<span class="string">"Johnny"</span>, <span class="number">29</span>)</div><div class="line">    <span class="comment">//true</span></div><div class="line">    println(<span class="string">"johnny == anotherJohnny  <span class="subst">$&#123;johnny == anotherJohnny&#125;</span>"</span>)</div><div class="line">    <span class="comment">//false</span></div><div class="line">    println(<span class="string">"johnny === anotherJohnny  <span class="subst">$&#123;johnny === anotherJohnny&#125;</span>"</span>)</div><div class="line">    <span class="comment">//true</span></div><div class="line">    println(<span class="string">"johnny.equals(anotherJohnny)  <span class="subst">$&#123;johnny.equals(anotherJohnny)&#125;</span>"</span>)</div><div class="line">    <span class="comment">//true</span></div><div class="line">    println(<span class="string">"johnny.hashCode() == anotherJohnny.hashCode() <span class="subst">$&#123;johnny.hashCode() == anotherJohnny.hashCode()&#125;</span>"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="函数-包括构造函数-的默认值"><a href="#函数-包括构造函数-的默认值" class="headerlink" title="函数(包括构造函数)的默认值"></a>函数(包括构造函数)的默认值</h2><p>如上例的<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>(<span class="keyword">val</span> name: String = <span class="string">"nobody"</span>, <span class="keyword">val</span> age: <span class="built_in">Int</span> = <span class="number">0</span>)</div></pre></td></tr></table></figure></p>
<p>对于普通函数<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">(a: <span class="type">Int</span> = <span class="number">0</span>, b: <span class="type">String</span> = <span class="string">""</span>)</span></span> &#123; ... &#125;</div></pre></td></tr></table></figure></p>
<p>有了默认的参数，就可以避免写多个重载函数<br>如下面的java代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">foo</span><span class="params">(String name, <span class="keyword">int</span> number, <span class="keyword">boolean</span> toUpperCase)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> (toUpperCase ? name.toUpperCase() : name) + number;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">foo</span><span class="params">(String name, <span class="keyword">int</span> number)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> foo(name, number, <span class="keyword">false</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">foo</span><span class="params">(String name, <span class="keyword">boolean</span> toUpperCase)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> foo(name, <span class="number">42</span>, toUpperCase);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">foo</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> foo(name, <span class="number">42</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以用一个kotlin函数表示<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">(name: <span class="type">String</span>, number: <span class="type">Int</span> = <span class="number">42</span>, toUpperCase: <span class="type">Boolean</span> = <span class="literal">false</span>)</span></span> =</div><div class="line">        (<span class="keyword">if</span> (toUpperCase) name.toUpperCase() <span class="keyword">else</span> name) + number</div></pre></td></tr></table></figure></p>
<h2 id="过滤list"><a href="#过滤list" class="headerlink" title="过滤list"></a>过滤list</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> positives = list.filter &#123; x =&gt; x &gt; <span class="number">0</span>&#125;</div></pre></td></tr></table></figure>
<p>甚至可以更简洁一点<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> positives = list.filter &#123; it &gt; <span class="number">0</span> &#125;</div></pre></td></tr></table></figure></p>
<h2 id="字符串模板"><a href="#字符串模板" class="headerlink" title="字符串模板"></a>字符串模板</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">println(<span class="string">"Name <span class="subst">$name</span>"</span>)</div></pre></td></tr></table></figure>
<h2 id="类型检查"><a href="#类型检查" class="headerlink" title="类型检查"></a>类型检查</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">when</span> (x) &#123;</div><div class="line">    <span class="keyword">is</span> Foo -&gt; ...</div><div class="line">    <span class="keyword">is</span> Bar -&gt; ...</div><div class="line">    <span class="keyword">else</span>   -&gt; ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="遍历集合"><a href="#遍历集合" class="headerlink" title="遍历集合"></a>遍历集合</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> ((k, v) <span class="keyword">in</span> map) &#123;</div><div class="line">    println(<span class="string">"<span class="subst">$k</span> -&gt; <span class="subst">$v</span>"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用范围（Ranges）"><a href="#使用范围（Ranges）" class="headerlink" title="使用范围（Ranges）"></a>使用范围（Ranges）</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.100</span>) &#123; ... &#125;  <span class="comment">// 闭区间包含100</span></div><div class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span> until <span class="number">100</span>) &#123; ... &#125; <span class="comment">// 半开区间，不包含100</span></div><div class="line"><span class="keyword">for</span> (x <span class="keyword">in</span> <span class="number">2.</span><span class="number">.10</span> step <span class="number">2</span>) &#123; ... &#125; </div><div class="line"><span class="keyword">for</span> (x <span class="keyword">in</span> <span class="number">10</span> downTo <span class="number">1</span>) &#123; ... &#125;</div><div class="line"><span class="keyword">if</span> (x <span class="keyword">in</span> <span class="number">1.</span><span class="number">.10</span>) &#123; ... &#125;</div></pre></td></tr></table></figure>
<h2 id="构造只读列表"><a href="#构造只读列表" class="headerlink" title="构造只读列表"></a>构造只读列表</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> list = listOf(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>)</div></pre></td></tr></table></figure>
<h2 id="构造只读map"><a href="#构造只读map" class="headerlink" title="构造只读map"></a>构造只读map</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> map = mapOf(<span class="string">"a"</span> to <span class="number">1</span>, <span class="string">"b"</span> to <span class="number">2</span>, <span class="string">"c"</span> to <span class="number">3</span>)</div></pre></td></tr></table></figure>
<h2 id="访问map"><a href="#访问map" class="headerlink" title="访问map"></a>访问map</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">println(map[<span class="string">"key"</span>])</div><div class="line">map[<span class="string">"key"</span>] = value</div></pre></td></tr></table></figure>
<h2 id="延迟加载"><a href="#延迟加载" class="headerlink" title="延迟加载"></a>延迟加载</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> p: String <span class="keyword">by</span> lazy &#123;</div><div class="line">    <span class="comment">// compute the string</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="函数扩展"><a href="#函数扩展" class="headerlink" title="函数扩展"></a>函数扩展</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> String.<span class="title">spaceToCamelCase</span><span class="params">()</span></span> &#123; ... &#125;</div><div class="line"></div><div class="line"><span class="string">"Convert this to camelcase"</span>.spaceToCamelCase()</div></pre></td></tr></table></figure>
<h2 id="创建单例"><a href="#创建单例" class="headerlink" title="创建单例"></a>创建单例</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">object</span> Resource &#123;</div><div class="line">    <span class="keyword">var</span> name = <span class="string">"Name"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line">	<span class="keyword">var</span> rs = Resource;</div><div class="line">    <span class="comment">//Name</span></div><div class="line">    println(rs.name)</div><div class="line">    <span class="keyword">var</span> rs2 = Resource;</div><div class="line">    <span class="comment">//Name</span></div><div class="line">    println(rs2.name)</div><div class="line">    rs.name = <span class="string">"Anthoer"</span></div><div class="line">    <span class="comment">//Another</span></div><div class="line">    println(rs.name)</div><div class="line">    <span class="comment">//Another</span></div><div class="line">    println(rs2.name)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="判断null"><a href="#判断null" class="headerlink" title="判断null"></a>判断null</h2><h3 id=""><a href="#" class="headerlink" title="?."></a>?.</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> files = File(<span class="string">"Test"</span>).listFiles()</div><div class="line"></div><div class="line">println(files?.size)</div></pre></td></tr></table></figure>
<p>例如：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getList</span><span class="params">(isNull: <span class="type">Boolean</span>)</span></span>: List&lt;String&gt;? =</div><div class="line">    <span class="keyword">if</span>(isNull) <span class="literal">null</span> <span class="keyword">else</span> listOf(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line">    <span class="keyword">var</span> list = getList(<span class="literal">true</span>)</div><div class="line">    <span class="comment">//"null"</span></div><div class="line">    println(list?.size)</div><div class="line">    </div><div class="line">    list = getList(<span class="literal">false</span>)</div><div class="line">    <span class="comment">//"3"</span></div><div class="line">    println(list?.size)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="可以执行语句块"><a href="#可以执行语句块" class="headerlink" title="?. 可以执行语句块"></a>?. 可以执行语句块</h3><p>val data = …</p>
<p>data?.let {<br>    … // execute this block if not null<br>}</p>
<h3 id="-1"><a href="#-1" class="headerlink" title="?:"></a>?:</h3><p>上述println语句可以改为<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">println(list?.size ?: <span class="string">"empty"</span> )</div></pre></td></tr></table></figure></p>
<p>这打印结果如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">empty</div><div class="line">3</div></pre></td></tr></table></figure></p>
<h3 id="后面的字符串也可以换成表达式"><a href="#后面的字符串也可以换成表达式" class="headerlink" title="?: 后面的字符串也可以换成表达式"></a>?: 后面的字符串也可以换成表达式</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> <span class="keyword">data</span> = ...</div><div class="line"><span class="keyword">val</span> email = <span class="keyword">data</span>[<span class="string">"email"</span>] ?: <span class="keyword">throw</span> IllegalStateException(<span class="string">"Email is missing!"</span>)</div></pre></td></tr></table></figure>
<h2 id="返回when语句"><a href="#返回when语句" class="headerlink" title="返回when语句"></a>返回when语句</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">transform</span><span class="params">(color: <span class="type">String</span>)</span></span>: <span class="built_in">Int</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">when</span> (color) &#123;</div><div class="line">        <span class="string">"Red"</span> -&gt; <span class="number">0</span></div><div class="line">        <span class="string">"Green"</span> -&gt; <span class="number">1</span></div><div class="line">        <span class="string">"Blue"</span> -&gt; <span class="number">2</span></div><div class="line">        <span class="keyword">else</span> -&gt; <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"Invalid color param value"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="‘try-catch’-表达式"><a href="#‘try-catch’-表达式" class="headerlink" title="‘try/catch’ 表达式"></a>‘try/catch’ 表达式</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">test</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">val</span> result = <span class="keyword">try</span> &#123;</div><div class="line">        count()</div><div class="line">    &#125; <span class="keyword">catch</span> (e: ArithmeticException) &#123;</div><div class="line">        <span class="keyword">throw</span> IllegalStateException(e)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// result是count()返回值</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="‘if’表达式"><a href="#‘if’表达式" class="headerlink" title="‘if’表达式"></a>‘if’表达式</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">(param: <span class="type">Int</span>)</span></span> &#123;</div><div class="line">    <span class="keyword">val</span> result = <span class="keyword">if</span> (param == <span class="number">1</span>) &#123;</div><div class="line">        <span class="string">"one"</span></div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (param == <span class="number">2</span>) &#123;</div><div class="line">        <span class="string">"two"</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="string">"three"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="表达式函数"><a href="#表达式函数" class="headerlink" title="表达式函数"></a>表达式函数</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">theAnswer</span><span class="params">()</span></span> = <span class="number">42</span></div></pre></td></tr></table></figure>
<p>等于如下函数<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">theAnswer</span><span class="params">()</span></span>: <span class="built_in">Int</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">42</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>表达式函数可以很方便的和其他惯用法结合在一起使用<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">transform</span><span class="params">(color: <span class="type">String</span>)</span></span>: <span class="built_in">Int</span> = <span class="keyword">when</span> (color) &#123;</div><div class="line">    <span class="string">"Red"</span> -&gt; <span class="number">0</span></div><div class="line">    <span class="string">"Green"</span> -&gt; <span class="number">1</span></div><div class="line">    <span class="string">"Blue"</span> -&gt; <span class="number">2</span></div><div class="line">    <span class="keyword">else</span> -&gt; <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"Invalid color param value"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="with语句（ES6不是快废除这个了？）"><a href="#with语句（ES6不是快废除这个了？）" class="headerlink" title="with语句（ES6不是快废除这个了？）"></a>with语句（ES6不是快废除这个了？）</h2><p>with语句块的函数都是对()括号内的对象的方法调用。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Turtle</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">penDown</span><span class="params">()</span></span></div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">penUp</span><span class="params">()</span></span></div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">turn</span><span class="params">(degrees: <span class="type">Double</span>)</span></span></div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">forward</span><span class="params">(pixels: <span class="type">Double</span>)</span></span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">val</span> myTurtle = Turtle()</div><div class="line">with(myTurtle) &#123; <span class="comment">//draw a 100 pix square</span></div><div class="line">    penDown()</div><div class="line">    <span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.4</span>) &#123;</div><div class="line">        forward(<span class="number">100.0</span>)</div><div class="line">        turn(<span class="number">90.0</span>)</div><div class="line">    &#125;</div><div class="line">    penUp()</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="nullable的Boolean对象"><a href="#nullable的Boolean对象" class="headerlink" title="nullable的Boolean对象"></a>nullable的Boolean对象</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> b: <span class="built_in">Boolean</span>? = ...</div><div class="line"><span class="keyword">if</span> (b == <span class="literal">true</span>) &#123;</div><div class="line">    ...</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// `b` 为false或者null</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;kotlin提供了一些惯用法（语法糖？），简单的记录一下。&lt;/p&gt;
&lt;h2 id=&quot;data-class&quot;&gt;&lt;a href=&quot;#data-class&quot; class=&quot;headerlink&quot; title=&quot;data class&quot;&gt;&lt;/a&gt;data class&lt;/h2&gt;&lt;p&gt;有时候需要一些类要保存数据，而不需要其他操作，当然基本操作除外，kotlin为data class提供的基本操作有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;equals() 相当与“==”操作&lt;/li&gt;
&lt;li&gt;hashCode() 计算hash值&lt;/li&gt;
&lt;li&gt;toString() 函数&lt;/li&gt;
&lt;li&gt;componentsN() 函数&lt;/li&gt;
&lt;li&gt;copy() 拷贝&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;User&lt;/span&gt;&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; name: String = &lt;span class=&quot;string&quot;&gt;&quot;nobody&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; age: &lt;span class=&quot;built_in&quot;&gt;Int&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(args: &lt;span class=&quot;type&quot;&gt;Array&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;&amp;gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//默认参数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; nobody = User()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//User(name=nobody, age=0)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    println(nobody)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; johnny = User(&lt;span class=&quot;string&quot;&gt;&quot;Johnny&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;29&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//解构赋值&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; (name, age) = johnny&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//name: Johnny, age: 29&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    println(&lt;span class=&quot;string&quot;&gt;&quot;name: &lt;span class=&quot;subst&quot;&gt;$name&lt;/span&gt;, age: &lt;span class=&quot;subst&quot;&gt;$age&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//toString用法&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//User(name=Johnny, age=29)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    println(johnny)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//hashCode用法&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//233064103&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    println(johnny.hashCode())&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//&quot;==&quot; 和&quot;===&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    println(&lt;span class=&quot;string&quot;&gt;&quot;johnny == johnny  &lt;span class=&quot;subst&quot;&gt;$&amp;#123;johnny == johnny&amp;#125;&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    println(&lt;span class=&quot;string&quot;&gt;&quot;johnny === johnny  &lt;span class=&quot;subst&quot;&gt;$&amp;#123;johnny === johnny&amp;#125;&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//copy用法&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; youngJohnny = johnny.copy(age = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//&quot;User(name=Johnny, age=2)&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    println(youngJohnny)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//false&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    println(&lt;span class=&quot;string&quot;&gt;&quot;johnny == youngJohnny  &lt;span class=&quot;subst&quot;&gt;$&amp;#123;johnny == youngJohnny&amp;#125;&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//false&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    println(&lt;span class=&quot;string&quot;&gt;&quot;johnny === youngJohnny  &lt;span class=&quot;subst&quot;&gt;$&amp;#123;johnny === youngJohnny&amp;#125;&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//false&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    println(&lt;span class=&quot;string&quot;&gt;&quot;johnny.hashCode() == yongJohnny.hashCode() &lt;span class=&quot;subst&quot;&gt;$&amp;#123;johnny.hashCode() == youngJohnny.hashCode()&amp;#125;&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; copyJohnny = johnny.copy()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    println(&lt;span class=&quot;string&quot;&gt;&quot;johnny == copyJohnny  &lt;span class=&quot;subst&quot;&gt;$&amp;#123;johnny == copyJohnny&amp;#125;&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//false&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    println(&lt;span class=&quot;string&quot;&gt;&quot;johnny === copyJohnny  &lt;span class=&quot;subst&quot;&gt;$&amp;#123;johnny === copyJohnny&amp;#125;&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    println(&lt;span class=&quot;string&quot;&gt;&quot;johnny.equals(copyJohnny)  &lt;span class=&quot;subst&quot;&gt;$&amp;#123;johnny.equals(copyJohnny)&amp;#125;&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    println(&lt;span class=&quot;string&quot;&gt;&quot;johnny.hashCode() == copyJohnny.hashCode() &lt;span class=&quot;subst&quot;&gt;$&amp;#123;johnny.hashCode() == copyJohnny.hashCode()&amp;#125;&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; anotherJohnny = User(&lt;span class=&quot;string&quot;&gt;&quot;Johnny&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;29&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    println(&lt;span class=&quot;string&quot;&gt;&quot;johnny == anotherJohnny  &lt;span class=&quot;subst&quot;&gt;$&amp;#123;johnny == anotherJohnny&amp;#125;&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//false&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    println(&lt;span class=&quot;string&quot;&gt;&quot;johnny === anotherJohnny  &lt;span class=&quot;subst&quot;&gt;$&amp;#123;johnny === anotherJohnny&amp;#125;&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    println(&lt;span class=&quot;string&quot;&gt;&quot;johnny.equals(anotherJohnny)  &lt;span class=&quot;subst&quot;&gt;$&amp;#123;johnny.equals(anotherJohnny)&amp;#125;&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    println(&lt;span class=&quot;string&quot;&gt;&quot;johnny.hashCode() == anotherJohnny.hashCode() &lt;span class=&quot;subst&quot;&gt;$&amp;#123;johnny.hashCode() == anotherJohnny.hashCode()&amp;#125;&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="kotlin" scheme="http://yoursite.com/tags/kotlin/"/>
    
  </entry>
  
  <entry>
    <title>kotlin初探</title>
    <link href="http://yoursite.com/2017/05/25/kotlin-sample/"/>
    <id>http://yoursite.com/2017/05/25/kotlin-sample/</id>
    <published>2017-05-25T04:33:34.000Z</published>
    <updated>2017-05-25T08:51:59.868Z</updated>
    
    <content type="html"><![CDATA[<p>最近google推出了新的Android开发语言<a href="http://kotlinlang.org/" target="_blank" rel="external">kotlin</a>，花了点时间了解一下皮毛。</p>
<p>在<a href="http://kotlinlang.org/" target="_blank" rel="external">kotlin</a>官网上的资料还是比较丰富的，提供了一个在线的<a href="https://try.kotlinlang.org/#/Examples/Hello,%20world!/Simplest%20version/Simplest%20version.kt" target="_blank" rel="external">编辑器</a>，可以写一些小的程序片段。另外提供了一个代码翻译的工具，可以直接将java代码片段翻译成kotlin。</p>
<p>例如以下java代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Greeting</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String greeting;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Greeting</span><span class="params">(String g)</span> </span>&#123;</div><div class="line">		greeting = g;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(String you)</span> </span>&#123;</div><div class="line">		System.out.println(greeting + <span class="string">" "</span> + you);</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> </span>&#123;</div><div class="line">		Greeting greeting = <span class="keyword">new</span> Greeting(<span class="string">"Hello"</span>);</div><div class="line">		greeting.sayHello(argv[<span class="number">0</span>]);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>对应的kotlin代码如下：<br><a id="more"></a><br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">class</span> <span class="title">Greeting</span></span>(g:String) &#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">val</span> greeting:String</div><div class="line">  init&#123;</div><div class="line">    greeting = g</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">sayHello</span><span class="params">(you:<span class="type">String</span>)</span></span> &#123;</div><div class="line">    println(greeting + <span class="string">" "</span> + you)</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</div><div class="line">    <span class="meta">@JvmStatic</span> <span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(argv:<span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line">      <span class="keyword">val</span> greeting = Greeting(<span class="string">"Hello"</span>)</div><div class="line">      greeting.sayHello(argv[<span class="number">0</span>])</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>kotlin语法很多特性都有javascript ES6的影子，比如字符串模板，解构赋值，箭头函数，元编程。</p>
<h3 id="包定义。"><a href="#包定义。" class="headerlink" title="包定义。"></a>包定义。</h3><p>包定义必需位于源文件的顶端，格式如下<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> my.demo</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.*</div><div class="line"></div><div class="line"><span class="comment">// ...</span></div></pre></td></tr></table></figure></p>
<p>这个跟java是一样的。</p>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="定义两个Int类型参数的求和函数"><a href="#定义两个Int类型参数的求和函数" class="headerlink" title="定义两个Int类型参数的求和函数"></a>定义两个Int类型参数的求和函数</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sum</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</div><div class="line">    <span class="keyword">return</span> a + b</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的函数可以有更简单的表达式写法</p>
<h4 id="定义表达式函数"><a href="#定义表达式函数" class="headerlink" title="定义表达式函数"></a>定义表达式函数</h4><p>可以看出表达式函数的返回值是自动推断的。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sum</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span> = a + b</div></pre></td></tr></table></figure></p>
<h3 id="定义空返回值函数"><a href="#定义空返回值函数" class="headerlink" title="定义空返回值函数"></a>定义空返回值函数</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">printSum</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: <span class="built_in">Unit</span> &#123;</div><div class="line">    println(<span class="string">"sum of <span class="subst">$a</span> and <span class="subst">$b</span> is <span class="subst">$&#123;a + b&#125;</span>"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中<b>Unit</b>可以省略<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">printSum</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: &#123;</div><div class="line">    println(<span class="string">"sum of <span class="subst">$a</span> and <span class="subst">$b</span> is <span class="subst">$&#123;a + b&#125;</span>"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>参见<a href="http://kotlinlang.org/docs/reference/functions.html" target="_blank" rel="external">函数</a></p>
<h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><h4 id="定义常量（只允许赋值一次）"><a href="#定义常量（只允许赋值一次）" class="headerlink" title="定义常量（只允许赋值一次）"></a>定义常量（只允许赋值一次）</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> a: <span class="built_in">Int</span> = <span class="number">1</span>  <span class="comment">// 立即赋值</span></div><div class="line"><span class="keyword">val</span> b = <span class="number">2</span>   <span class="comment">// 类型推断，为`Int`</span></div><div class="line"><span class="keyword">val</span> c: <span class="built_in">Int</span>  <span class="comment">// 如果没有给出初始化的值，需要给出变量类型</span></div><div class="line">c = <span class="number">3</span>       <span class="comment">// 延迟赋值</span></div></pre></td></tr></table></figure>
<h4 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">5</span> <span class="comment">// 类型推断</span></div><div class="line">x += <span class="number">1</span></div></pre></td></tr></table></figure>
<p>参见<a href="http://kotlinlang.org/docs/reference/properties.html" target="_blank" rel="external">属性和域</a></p>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>kotlin的注释跟java是一样的，支持行和块两种注释方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// This is an end-of-line comment</div><div class="line"></div><div class="line">/* This is a block comment</div><div class="line">   on multiple lines. */</div></pre></td></tr></table></figure></p>
<p>跟java不一样的是，kotlin的块注释是可以嵌套的。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> *This is a block comment</div><div class="line"> *  on multiple lines</div><div class="line"> /* This is a nested block comment.*/</div><div class="line"> *This <span class="keyword">is</span> a block comment</div><div class="line"> *  on multiple lines</div><div class="line"> */</div></pre></td></tr></table></figure></p>
<p>参见<a href="http://kotlinlang.org/docs/reference/kotlin-doc.html" target="_blank" rel="external">注释</a></p>
<h3 id="字符串模板"><a href="#字符串模板" class="headerlink" title="字符串模板"></a>字符串模板</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">1</span></div><div class="line"><span class="comment">// 简单的字符串模板：</span></div><div class="line"><span class="keyword">val</span> s1 = <span class="string">"a is <span class="subst">$a</span>"</span> </div><div class="line"></div><div class="line">a = <span class="number">2</span></div><div class="line"><span class="comment">// 任意表达式的模板：</span></div><div class="line"><span class="keyword">val</span> s2 = <span class="string">"<span class="subst">$&#123;s1.replace("is", "was")&#125;</span>, but now is <span class="subst">$a</span>"</span></div></pre></td></tr></table></figure>
<p>参见<a href="http://kotlinlang.org/docs/reference/basic-types.html#string-templates" target="_blank" rel="external">字符串模板</a></p>
<h3 id="条件表达式"><a href="#条件表达式" class="headerlink" title="条件表达式"></a>条件表达式</h3><p>kotlin没有三目运算符，取而代之的是条件表达式。</p>
<p>例如一个常规的求最大值函数<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">maxOf</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</div><div class="line">    <span class="keyword">if</span>(a &gt; b) &#123;</div><div class="line">        <span class="keyword">return</span> a</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> b</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>假如用条件表达式可以这样写<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">maxOf</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span> = <span class="keyword">if</span>(a &gt; b) a <span class="keyword">else</span> b</div></pre></td></tr></table></figure></p>
<p>参见<a href="http://kotlinlang.org/docs/reference/control-flow.html#if-expression" target="_blank" rel="external">if表达式</a></p>
<h3 id="使用nullable和判断null"><a href="#使用nullable和判断null" class="headerlink" title="使用nullable和判断null"></a>使用nullable和判断null</h3><p>如果一个值可能是null的话必须显示的标记出来，如<br>如果<b>str</b>转换成<b>Int</b>失败，返回<b>null</b>:<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">parseInt</span><span class="params">(str: <span class="type">String</span>)</span></span>: <span class="built_in">Int</span>? &#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用返回nullable的函数。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">printProduct</span><span class="params">(arg1: <span class="type">String</span>, arg2: <span class="type">String</span>)</span></span> &#123;</div><div class="line">    <span class="keyword">val</span> x = parseInt(arg1)</div><div class="line">    <span class="keyword">val</span> y = parseInt(arg2)</div><div class="line">    <span class="keyword">if</span>(x != <span class="literal">null</span> &amp;&amp; y != <span class="literal">null</span>) &#123;</div><div class="line">        println(x * y)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        println(<span class="string">"'<span class="subst">$arg1</span>' 或者 '<span class="subst">$arg2</span>' 不是数字"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>参见<a href="http://kotlinlang.org/docs/reference/null-safety.html" target="_blank" rel="external">安全的null</a></p>
<h3 id="类型检查和自动转换"><a href="#类型检查和自动转换" class="headerlink" title="类型检查和自动转换"></a>类型检查和自动转换</h3><p>这个操作用来检查一个对象的类型，局部变量或者属性经过判断之后，不用再显示的转换了，例如。</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getStringLength</span><span class="params">(obj: <span class="type">Any</span>)</span></span>: <span class="built_in">Int</span>? &#123;</div><div class="line">    <span class="keyword">if</span>(obj <span class="keyword">is</span> String) &#123;</div><div class="line">        <span class="comment">//obj在这个分支内自动转为"String"类型</span></div><div class="line">        <span class="keyword">return</span> obj.length</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//在上面的类型检查分支之外，类型仍然为"Any"</span></div><div class="line">    <span class="keyword">return</span> <span class="literal">null</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>另一种方式<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getStringLength</span><span class="params">(obj: <span class="type">Any</span>)</span></span>: <span class="built_in">Int</span>? &#123;</div><div class="line">    <span class="keyword">if</span>(obj !<span class="keyword">is</span> String) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">null</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> obj.length</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>甚至可以这样<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getStringLength</span><span class="params">(obj: <span class="type">Any</span>)</span></span>: <span class="built_in">Int</span>? &#123;</div><div class="line">    <span class="comment">//obj在&amp;&amp;右侧自动转换为String类型</span></div><div class="line">    <span class="keyword">if</span>(obj <span class="keyword">is</span> String &amp;&amp; obj.length &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> obj.length</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">null</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>参见<a href="http://kotlinlang.org/docs/reference/classes.html" target="_blank" rel="external">类</a>和<a href="http://kotlinlang.org/docs/reference/typecasts.html" target="_blank" rel="external">类型转换</a></p>
<h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> items = listOf(<span class="string">"apple"</span>, <span class="string">"banana"</span>, <span class="string">"kiwi"</span>)</div><div class="line"><span class="keyword">for</span>(item <span class="keyword">in</span> items) &#123;</div><div class="line">    println(item)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>或者<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> items = listOf(<span class="string">"apple"</span>, <span class="string">"banana"</span>, <span class="string">"kiwi"</span>)</div><div class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> items.indices) &#123;</div><div class="line">    println(<span class="string">"item at <span class="subst">$i</span> is <span class="subst">$&#123;item[i]&#125;</span>"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>参见<a href="http://kotlinlang.org/docs/reference/control-flow.html#for-loops" target="_blank" rel="external">for循环</a></p>
<h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> items = listOf(<span class="string">"apple"</span>, <span class="string">"banana"</span>, <span class="string">"kiwi"</span>)</div><div class="line"><span class="keyword">var</span> i = <span class="number">0</span></div><div class="line"><span class="keyword">while</span>(i &lt; items.size) &#123;</div><div class="line">    println(<span class="string">"item at <span class="subst">$i</span> is <span class="subst">$&#123;item[i]&#125;</span>"</span>)</div><div class="line">    i++</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>参见<a href="http://kotlinlang.org/docs/reference/control-flow.html#while-loops" target="_blank" rel="external">while循环</a></p>
<h3 id="when表达式"><a href="#when表达式" class="headerlink" title="when表达式"></a>when表达式</h3><p>when通常用来代替switch和多个if else，且功能强大的多。如<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">describe</span><span class="params">(obj: <span class="type">Any</span>)</span></span>: String = </div><div class="line"><span class="keyword">when</span>(obj) &#123;</div><div class="line">    <span class="number">1</span> -&gt; <span class="string">"One"</span></div><div class="line">    <span class="string">"Hello"</span> -&gt; <span class="string">"Greeting"</span></div><div class="line">    <span class="keyword">is</span> <span class="built_in">Long</span> -&gt; <span class="string">"Long"</span></div><div class="line">    !<span class="keyword">is</span> String -&gt; <span class="string">"Not a String"</span></div><div class="line">    <span class="keyword">else</span> -&gt; <span class="string">"Unknow"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>参见<a href="http://kotlinlang.org/docs/reference/control-flow.html#when-expression" target="_blank" rel="external">when表达式</a></p>
<h3 id="使用范围表达式"><a href="#使用范围表达式" class="headerlink" title="使用范围表达式(..)"></a>使用范围表达式(<b>..</b>)</h3><h4 id="用in运算符检查一个数字是否在一个范围内。"><a href="#用in运算符检查一个数字是否在一个范围内。" class="headerlink" title="用in运算符检查一个数字是否在一个范围内。"></a>用in运算符检查一个数字是否在一个范围内。</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> x = <span class="number">10</span></div><div class="line"><span class="keyword">val</span> y = <span class="number">9</span></div><div class="line"><span class="comment">//这是个闭区间,1和y+1都算进去。</span></div><div class="line"><span class="keyword">if</span>(x <span class="keyword">in</span> <span class="number">1.</span>.y+<span class="number">1</span>) &#123;</div><div class="line">    println(<span class="string">"fits in range"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="检查一个数字是否超出范围"><a href="#检查一个数字是否超出范围" class="headerlink" title="检查一个数字是否超出范围"></a>检查一个数字是否超出范围</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> list = listOf(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>)</div><div class="line"><span class="keyword">if</span>(<span class="number">-1</span> !<span class="keyword">in</span> <span class="number">0.</span>.list.lastIndex) &#123;</div><div class="line">    println(<span class="string">"-1 is out of range"</span>)</div><div class="line">&#125; </div><div class="line"><span class="keyword">if</span>(list.size !<span class="keyword">is</span> list.indices) &#123;</div><div class="line">    println(<span class="string">"list size is out of valid list indices range too"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="遍历一个范围"><a href="#遍历一个范围" class="headerlink" title="遍历一个范围"></a>遍历一个范围</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(x <span class="keyword">in</span> <span class="number">1.</span><span class="number">.5</span>) &#123;</div><div class="line">    print(x)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="使用步进遍历范围"><a href="#使用步进遍历范围" class="headerlink" title="使用步进遍历范围"></a>使用步进遍历范围</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(x <span class="keyword">in</span> <span class="number">1.</span><span class="number">.10</span> step <span class="number">2</span>) &#123;</div><div class="line">    print(x)</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(x <span class="keyword">in</span> <span class="number">9</span> downTo <span class="number">0</span> step <span class="number">3</span>) &#123;</div><div class="line">    print(x)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>参见<a href="http://kotlinlang.org/docs/reference/ranges.html" target="_blank" rel="external">范围</a></p>
<h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><p>遍历一个集合<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (item <span class="keyword">in</span> items) &#123;</div><div class="line">    println(item)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用in操作判断集合是否含有某元素，如<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line">    <span class="keyword">val</span> items = setOf(<span class="string">"apple"</span>, <span class="string">"banana"</span>, <span class="string">"kiwi"</span>)</div><div class="line">    <span class="keyword">when</span> &#123;</div><div class="line">        <span class="string">"orange"</span> <span class="keyword">in</span> items -&gt; println(<span class="string">"juicy"</span>)</div><div class="line">        <span class="string">"apple"</span> <span class="keyword">in</span> items -&gt; println(<span class="string">"apple is fine too"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上述代码输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apple is fine too</div></pre></td></tr></table></figure></p>
<p>使用lambda表达式过滤map集合<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line">    <span class="keyword">val</span> fruits = listOf(<span class="string">"banana"</span>, <span class="string">"avocado"</span>, <span class="string">"apple"</span>, <span class="string">"kiwi"</span>)</div><div class="line">    fruits</div><div class="line">    .filter &#123; it.startsWith(<span class="string">"a"</span>) &#125;</div><div class="line">    .sortedBy &#123; it &#125;</div><div class="line">    .map &#123; it.toUpperCase() &#125;</div><div class="line">    .forEach &#123; println(it) &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上述代码输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">APPLE</div><div class="line">AVOCADO</div></pre></td></tr></table></figure></p>
<p>参见<a href="http://kotlinlang.org/docs/reference/lambdas.html" target="_blank" rel="external">高阶函数和lambda</a></p>
<h2 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h2><h4 id="数组求和"><a href="#数组求和" class="headerlink" title="数组求和"></a>数组求和</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * Your task is to implement the sum() function so that it computes the sum of</div><div class="line"> * all elements in the given array a.</div><div class="line"> */</div><div class="line"><span class="keyword">package</span> sum</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sum</span><span class="params">(a: <span class="type">IntArray</span>)</span></span>: <span class="built_in">Int</span> &#123;</div><div class="line">    <span class="keyword">var</span> s = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span>(n <span class="keyword">in</span> a) &#123;</div><div class="line">        s += n</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> s</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="求数组最大值索引"><a href="#求数组最大值索引" class="headerlink" title="求数组最大值索引"></a>求数组最大值索引</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * Your task is to implement the indexOfMax() function so that it returns</div><div class="line"> * the index of the largest element in the array, or null if the array is empty.</div><div class="line"> */</div><div class="line"><span class="keyword">package</span> maxindex</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">indexOfMax</span><span class="params">(a: <span class="type">IntArray</span>)</span></span>: <span class="built_in">Int</span>? &#123;</div><div class="line">	<span class="keyword">if</span>(a.size == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">null</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> m = Integer.MIN_VALUE</div><div class="line">    <span class="keyword">var</span> ret = <span class="number">-1</span></div><div class="line">    <span class="keyword">for</span>(i <span class="keyword">in</span> a.indices) &#123;</div><div class="line">        <span class="keyword">if</span>(a[i] &gt;= m) &#123;</div><div class="line">            m = a[i]</div><div class="line">            ret = i;</div><div class="line">        &#125;</div><div class="line">    &#125; </div><div class="line">    <span class="keyword">return</span> ret</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="这是求个什么？自己看解释吧"><a href="#这是求个什么？自己看解释吧" class="headerlink" title="这是求个什么？自己看解释吧"></a>这是求个什么？自己看解释吧</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * Any array may be viewed as a number of "runs" of equal numbers.</div><div class="line"> * For example, the following array has two runs:</div><div class="line"> *   1, 1, 1, 2, 2</div><div class="line"> * Three 1's in a row form the first run, and two 2's form the second.</div><div class="line"> * This array has two runs of length one:</div><div class="line"> *   3, 4</div><div class="line"> * And this one has five runs:</div><div class="line"> *   1, 0, 1, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0</div><div class="line"> * Your task is to implement the runs() function so that it returns the number</div><div class="line"> * of runs in the given array.</div><div class="line"> */</div><div class="line"><span class="keyword">package</span> runs</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">runs</span><span class="params">(a: <span class="type">IntArray</span>)</span></span>: <span class="built_in">Int</span> &#123;</div><div class="line">    <span class="keyword">if</span>(a.size == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> ret = <span class="number">1</span></div><div class="line">    <span class="keyword">var</span> cur = a[<span class="number">0</span>]</div><div class="line">    <span class="keyword">for</span>(n <span class="keyword">in</span> a) &#123;</div><div class="line">    	<span class="keyword">if</span>(n != cur) &#123;</div><div class="line">            ++ret</div><div class="line">            cur = n</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="求是否是回文字符串"><a href="#求是否是回文字符串" class="headerlink" title="求是否是回文字符串"></a>求是否是回文字符串</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * Your task is to implement a palindrome test.</div><div class="line"> *</div><div class="line"> * A string is called a palindrome when it reads the same way left-to-right</div><div class="line"> * and right-to-left.</div><div class="line"> *</div><div class="line"> * See http://en.wikipedia.org/wiki/Palindrome</div><div class="line"> */</div><div class="line"><span class="keyword">package</span> palindrome</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">isPalindrome</span><span class="params">(s: <span class="type">String</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</div><div class="line">    <span class="keyword">if</span>(s.length &lt; <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> len = s.length / <span class="number">2</span></div><div class="line">    <span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">0.</span>.len - <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">if</span>(s[i] != s[s.length - i - <span class="number">1</span>]) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="求落单数字"><a href="#求落单数字" class="headerlink" title="求落单数字"></a>求落单数字</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * Think of a perfect world where everybody has a soulmate.</div><div class="line"> * Now, the real world is imperfect: there is exactly one number in the array</div><div class="line"> * that does not have a pair. A pair is an element with the same value.</div><div class="line"> * For example in this array:</div><div class="line"> *   1, 2, 1, 2</div><div class="line"> * every number has a pair, but in this one:</div><div class="line"> *   1, 1, 1</div><div class="line"> * one of the ones is lonely.</div><div class="line"> *</div><div class="line"> * Your task is to implement the findPairless() function so that it finds the</div><div class="line"> * lonely number and returns it.</div><div class="line"> *</div><div class="line"> * A hint: there's a solution that looks at each element only once and uses no</div><div class="line"> * data structures like collections or trees.</div><div class="line"> */</div><div class="line"><span class="keyword">package</span> pairless</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">findPairless</span><span class="params">(a: <span class="type">IntArray</span>)</span></span>: <span class="built_in">Int</span> &#123;</div><div class="line">    <span class="comment">// Write your solution here</span></div><div class="line">    <span class="keyword">var</span> map = hashMapOf&lt;<span class="built_in">Int</span>, <span class="built_in">Int</span>&gt;();</div><div class="line">    <span class="keyword">for</span>(n <span class="keyword">in</span> a) &#123;</div><div class="line">        <span class="keyword">var</span> i = map.<span class="keyword">get</span>(n)</div><div class="line">        </div><div class="line">        map.put(n, <span class="keyword">if</span>(i == <span class="literal">null</span>) <span class="number">1</span> <span class="keyword">else</span> i + <span class="number">1</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">for</span>((k, v) <span class="keyword">in</span> map) &#123;</div><div class="line">        <span class="keyword">if</span>(v % <span class="number">2</span> == <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">return</span> k</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近google推出了新的Android开发语言&lt;a href=&quot;http://kotlinlang.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;kotlin&lt;/a&gt;，花了点时间了解一下皮毛。&lt;/p&gt;
&lt;p&gt;在&lt;a href=&quot;http://kotlinlang.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;kotlin&lt;/a&gt;官网上的资料还是比较丰富的，提供了一个在线的&lt;a href=&quot;https://try.kotlinlang.org/#/Examples/Hello,%20world!/Simplest%20version/Simplest%20version.kt&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;编辑器&lt;/a&gt;，可以写一些小的程序片段。另外提供了一个代码翻译的工具，可以直接将java代码片段翻译成kotlin。&lt;/p&gt;
&lt;p&gt;例如以下java代码：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Greeting&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String greeting;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Greeting&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String g)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		greeting = g;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String you)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		System.out.println(greeting + &lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt; + you);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] argv)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		Greeting greeting = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Greeting(&lt;span class=&quot;string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		greeting.sayHello(argv[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;对应的kotlin代码如下：&lt;br&gt;
    
    </summary>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="kotlin" scheme="http://yoursite.com/tags/kotlin/"/>
    
  </entry>
  
  <entry>
    <title>NavigationPrompt-react router 4.0.0 api中文文档</title>
    <link href="http://yoursite.com/2016/12/02/react-router-4-0-0-api-NavigationPrompt/"/>
    <id>http://yoursite.com/2016/12/02/react-router-4-0-0-api-NavigationPrompt/</id>
    <published>2016-12-02T11:16:00.000Z</published>
    <updated>2017-05-25T03:41:18.236Z</updated>
    
    <content type="html"><![CDATA[<font size="6em">&lt;NavigationPrompt&gt;</font>

<p>当你的应用进入一个状态，但是需要防止用户从当前状态离开时（比如填了一半的表单），渲染出一个导航确认（NavigationPrompt）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;formIsHalfFilledOut &amp;&amp; (</div><div class="line">  &lt;NavigationPrompt message=&quot;Are you sure you want to leave?&quot;/&gt;</div><div class="line">)&#125;</div></pre></td></tr></table></figure></p>
<h3 id="message-string"><a href="#message-string" class="headerlink" title="message: string"></a><font color="red">message: string</font></h3><a id="more"></a>
<p>当用户试图从当前状态离开时显示的信息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;NavigationPrompt message=&quot;Are you sure you want to leave?&quot;/&gt;</div></pre></td></tr></table></figure></p>
<h3 id="message-func"><a href="#message-func" class="headerlink" title="message: func"></a><font color="red">message: func</font></h3><p>这个函数返回一个提示用户跳转的信息，如果返回true，则允许跳转，函数的参数是用户将要跳转的下一个链接，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;NavigationPrompt message=&#123;(location) =&gt; (</div><div class="line">  `Are you sure you want to go to $&#123;location.pathname&#125;?`</div><div class="line">)&#125;/&gt;</div></pre></td></tr></table></figure></p>
<h3 id="when-bool"><a href="#when-bool" class="headerlink" title="when: bool"></a><font color="red">when: bool</font></h3><p>when是一个逻辑变量，为true时，将显示message内容的弹窗，为false时，直接跳转。</p>
<p><navigationprompt when="{formIsHalfFilledOut}" message="Are you sure?"></navigationprompt></p>
<font size="6em">&lt;/NavigationPrompt&gt;</font>

]]></content>
    
    <summary type="html">
    
      &lt;font size=&quot;6em&quot;&gt;&amp;lt;NavigationPrompt&amp;gt;&lt;/font&gt;

&lt;p&gt;当你的应用进入一个状态，但是需要防止用户从当前状态离开时（比如填了一半的表单），渲染出一个导航确认（NavigationPrompt）。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;formIsHalfFilledOut &amp;amp;&amp;amp; (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;lt;NavigationPrompt message=&amp;quot;Are you sure you want to leave?&amp;quot;/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;)&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;message-string&quot;&gt;&lt;a href=&quot;#message-string&quot; class=&quot;headerlink&quot; title=&quot;message: string&quot;&gt;&lt;/a&gt;&lt;font color=&quot;red&quot;&gt;message: string&lt;/font&gt;&lt;/h3&gt;
    
    </summary>
    
      <category term="react router 4.0.0 api中文文档" scheme="http://yoursite.com/categories/react-router-4-0-0-api%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="react-router" scheme="http://yoursite.com/tags/react-router/"/>
    
      <category term="翻译文档" scheme="http://yoursite.com/tags/%E7%BF%BB%E8%AF%91%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>Link-react router 4.0.0 api中文文档</title>
    <link href="http://yoursite.com/2016/11/29/react-router-4-0-0-api-Link/"/>
    <id>http://yoursite.com/2016/11/29/react-router-4-0-0-api-Link/</id>
    <published>2016-11-29T06:18:08.000Z</published>
    <updated>2017-05-25T03:41:18.235Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://react-router.now.sh/Link" target="_blank" rel="external">原文链接</a></p>
<font size="6em">&lt;Link&gt;</font>

<p>为你的应用提供可以声明的，可访问的导航功能。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;Link to=<span class="string">"/about"</span> activeClassName=<span class="string">"active"</span>&gt;</div><div class="line">  About</div><div class="line">&lt;<span class="regexp">/Link&gt;</span></div></pre></td></tr></table></figure></p>
<font color="red">children: node | func</font>

<p>Link组件可以接受一个函数作为子控件，使得允许你使用自定义的组件渲染Link对象。</p>
<a id="more"></a>
<p>子控件函数的参数是一个对象，包含如下属性：</p>
<ul>
<li>isActive: (bool) 当前链接是否激活</li>
<li>location: 传递给Link的链接</li>
<li>href: (string) 路由的url</li>
<li>onClick: (func) dom的onClick处理函数</li>
<li>transition: (func) 它是router.transitionTo的快捷方式，代表Link对象的to属性。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;Link to=<span class="string">"/courses"</span>&gt;&#123;</div><div class="line">  (&#123;isActive, location, href, onClick, transition&#125;) =&gt; </div><div class="line">    &lt;RaisedButton label="Courses" onClick=&#123;onClick&#125; primary=&#123;isActive&#125; href=&#123;href&#125; /&gt;</div><div class="line">&#125;&lt;/Link&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<font color="red">to: string | object</font>

<p>链接的描述。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;Link to=&quot;/courses&quot;/&gt;</div><div class="line">&lt;Link to=&#123;&#123;</div><div class="line">  pathname: &apos;/courses&apos;,</div><div class="line">  query: &#123; sort: &apos;name&apos; &#125;,</div><div class="line">  state: &#123; fromDashboard: true &#125;</div><div class="line">&#125;&#125;/&gt;</div></pre></td></tr></table></figure></p>
<font color="red">activeStyle: object</font>

<p>当链接匹配到<font color="grey" size="5em"><strong>to</strong></font>属性时的样式对象。它会和tyle对象合并之后生效。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;Link</div><div class="line">  to=&quot;/courses&quot;</div><div class="line">  style=&#123;&#123; color: &apos;blue&apos;, background: &apos;gray&apos; &#125;&#125;</div><div class="line">  activeStyle=&#123;&#123; color: &apos;red&apos; &#125;&#125;</div><div class="line">/&gt;</div><div class="line">// 总是有灰色背景</div><div class="line">// 链接为/foo时字体为blue</div><div class="line">// 为/courses为red(激活状态)</div></pre></td></tr></table></figure></p>
<font color="red">activeClassName: string</font>

<p>当匹配到链接时，生效的className。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;Link</div><div class="line">  to=<span class="string">"/courses"</span></div><div class="line">  className=<span class="string">"course-link"</span></div><div class="line">  activeClassName=<span class="string">"active"</span></div><div class="line">/&gt;</div><div class="line"><span class="comment">// will always have "course-link"</span></div><div class="line"><span class="comment">// at /courses it will be "course-link active"</span></div></pre></td></tr></table></figure></p>
<font color="red">activeOnlyWhenExact: bool</font>

<p>为true时, 只有当严格匹配，activeClassName和activeStyle才会生效。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;Link to=&quot;/courses&quot; activeOnlyWhenExact activeClassName=&quot;active&quot;/&gt;</div><div class="line">// /courses 被激活</div><div class="line">// /courses/123 不被激活</div></pre></td></tr></table></figure>
<font color="red">isActive: func</font>

<p>允许自定义当前链接是否被激活，激活时返回true，否则返回false。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;Link</div><div class="line">  to=<span class="string">"/"</span></div><div class="line">  activeStyle=&#123;&#123; color: <span class="string">'red'</span> &#125;&#125;</div><div class="line">  isActive=&#123;(location) =&gt; (</div><div class="line">    <span class="comment">// 只有当没有query字段时被激活</span></div><div class="line">    !<span class="built_in">Object</span>.keys(location.query).length</div><div class="line">  )&#125;</div><div class="line">/&gt;</div><div class="line"></div><div class="line">&lt;Link</div><div class="line">  to="/courses"</div><div class="line">  activeStyle=&#123;&#123; color: 'red' &#125;&#125;</div><div class="line">  isActive=&#123;(location, props) =&gt; (</div><div class="line">    // 匹配到"/courses" 或者 "/course/123"被激活</div><div class="line">    // 尽管这不是真正意义上的被激活, it is</div><div class="line">    // theoretically for the sake of a navigation menu</div><div class="line">    location.pathname.match(/course(s)?/)</div><div class="line">  )&#125;</div><div class="line">/&gt;</div></pre></td></tr></table></figure></p>
<font color="red">location</font>

<p>如果你不想使用上下文中的location, 可以传递一个location的属性作为替代，这在链接比较深的redux应用中很有用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Match pattern=&quot;/foo&quot; location=&#123;this.props.location&#125;/&gt;</div></pre></td></tr></table></figure></p>
<font size="6em">&lt;/Link&gt;</font>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://react-router.now.sh/Link&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文链接&lt;/a&gt;&lt;/p&gt;
&lt;font size=&quot;6em&quot;&gt;&amp;lt;Link&amp;gt;&lt;/font&gt;

&lt;p&gt;为你的应用提供可以声明的，可访问的导航功能。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;Link to=&lt;span class=&quot;string&quot;&gt;&quot;/about&quot;&lt;/span&gt; activeClassName=&lt;span class=&quot;string&quot;&gt;&quot;active&quot;&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  About&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/Link&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;font color=&quot;red&quot;&gt;children: node | func&lt;/font&gt;

&lt;p&gt;Link组件可以接受一个函数作为子控件，使得允许你使用自定义的组件渲染Link对象。&lt;/p&gt;
    
    </summary>
    
      <category term="react router 4.0.0 api中文文档" scheme="http://yoursite.com/categories/react-router-4-0-0-api%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="react-router" scheme="http://yoursite.com/tags/react-router/"/>
    
      <category term="翻译文档" scheme="http://yoursite.com/tags/%E7%BF%BB%E8%AF%91%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>Miss-react router 4.0.0 api中文文档</title>
    <link href="http://yoursite.com/2016/11/29/react-router-4-0-0-api-Miss/"/>
    <id>http://yoursite.com/2016/11/29/react-router-4-0-0-api-Miss/</id>
    <published>2016-11-29T05:55:49.000Z</published>
    <updated>2017-05-25T03:41:18.236Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://react-router.now.sh/Miss" target="_blank" rel="external">原文链接</a></p>
<font size="6em">&lt;Miss&gt;</font>

<p>当没有匹配到当前的地址时，将会渲染Miss。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> App = () =&gt; (</div><div class="line">  &lt;Router&gt;</div><div class="line">    &lt;Match pattern="/foo"/&gt;</div><div class="line">    &lt;Match pattern="/bar"/&gt;</div><div class="line">    &lt;Miss component=&#123;NoMatch&#125;/&gt;</div><div class="line">  &lt;/Router&gt;</div><div class="line">)</div><div class="line"></div><div class="line">const NoMatch = (&#123; location &#125;) =&gt; (</div><div class="line">  &lt;div&gt;Nothing matched &#123;location.pathname&#125;.&lt;/div&gt;</div><div class="line">)</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h3 id="component"><a href="#component" class="headerlink" title="component"></a><font color="red">component</font></h3><p>跟Match一样的，表示将要渲染的组建，但是不同的是只有location一个prop传进去。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Miss component=&#123;NoMatch&#125;/&gt;</div></pre></td></tr></table></figure></p>
<h3 id="render-func"><a href="#render-func" class="headerlink" title="render: func"></a><font color="red">render: func</font></h3><p>跟Match一样的，可以提供一个渲染函数，同样，也只有location一个prop传进去。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;Miss render=&#123;(&#123; location &#125;) =&gt; (</div><div class="line">  &lt;div&gt;Nothing matched &#123;location.pathname&#125;.&lt;/div&gt;</div><div class="line">)&#125;/&gt;</div></pre></td></tr></table></figure></p>
<p><font size="6em">&lt;/Miss&gt;<font></font></font></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://react-router.now.sh/Miss&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文链接&lt;/a&gt;&lt;/p&gt;
&lt;font size=&quot;6em&quot;&gt;&amp;lt;Miss&amp;gt;&lt;/font&gt;

&lt;p&gt;当没有匹配到当前的地址时，将会渲染Miss。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; App = () =&amp;gt; (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;lt;Router&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;Match pattern=&quot;/foo&quot;/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;Match pattern=&quot;/bar&quot;/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;Miss component=&amp;#123;NoMatch&amp;#125;/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;lt;/Router&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;const NoMatch = (&amp;#123; location &amp;#125;) =&amp;gt; (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;lt;div&amp;gt;Nothing matched &amp;#123;location.pathname&amp;#125;.&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="react router 4.0.0 api中文文档" scheme="http://yoursite.com/categories/react-router-4-0-0-api%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="react-router" scheme="http://yoursite.com/tags/react-router/"/>
    
      <category term="翻译文档" scheme="http://yoursite.com/tags/%E7%BF%BB%E8%AF%91%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>解决 /dev/kvm is not found 的问题</title>
    <link href="http://yoursite.com/2016/11/28/fix-dev-kvm-is-not-found/"/>
    <id>http://yoursite.com/2016/11/28/fix-dev-kvm-is-not-found/</id>
    <published>2016-11-28T11:44:23.000Z</published>
    <updated>2017-05-25T03:41:18.233Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题出现环境"><a href="#问题出现环境" class="headerlink" title="问题出现环境"></a>问题出现环境</h2><ul>
<li>Ubuntu 12.04</li>
<li>Android Studio 2.2.2</li>
</ul>
<h2 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h2><h3 id="开启VT-x"><a href="#开启VT-x" class="headerlink" title="开启VT-x"></a>开启VT-x</h3><p>在ubuntu上使用Android Studio创建模拟器时，会提示一个错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/dev/kvm is not found</div></pre></td></tr></table></figure></p>
<p>并且提示要在<em>BIOS</em>里面开启<font size="4em"><strong>VT-x</strong></font>。</p>
<a id="more"></a>
<p>重启电脑，按<em>DEL</em>键进入<em>BIOS</em>,发现确实没有启用，于是启用后再此重启电脑。</p>
<p>此时打开Android Studio，仍然提示一样的错误。</p>
<p>再次在网上搜寻，发现如下解决方案，记录一下。</p>
<p><a href="http://askubuntu.com/questions/600727/replacement-for-haxm-on-ubuntu-says-intel-x86-emulator-accelerator-is-not-comp" target="_blank" rel="external">http://askubuntu.com/questions/600727/replacement-for-haxm-on-ubuntu-says-intel-x86-emulator-accelerator-is-not-comp</a></p>
<p>###<br>Check if your CPU supports hardware virtualization, by typing:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">egrep -c &apos;(vmx|svm)&apos; /proc/cpuinfo</div></pre></td></tr></table></figure></p>
<p>If the result is 0, your CPU does not support hardware virtualization, which is necessary to run the KVM. If you get 1 or more, that means you’re fine.</p>
<p>Next, install KVM. First make sure if your processor supports KVM by typing:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kvm-ok</div></pre></td></tr></table></figure></p>
<p>You will see this if that’s the case:</p>
<p>INFO: Your CPU supports KVM extensions INFO: /dev/kvm exists KVM acceleration can be used<br>If this is the result, you need to turn on Intel VT in BIOS:</p>
<p>INFO: KVM is disabled by your BIOS HINT: Enter your BIOS setup and enable Virtualization Technology (VT), and then hard poweroff/poweron your system KVM acceleration can NOT be used<br>The next step is to install the KVM and a few other packages needed. To do so, type:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install qemu-kvm libvirt-bin ubuntu-vm-builder bridge-utils</div></pre></td></tr></table></figure></p>
<p>Add your user to some groups, replacing by your own username:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo adduser &lt;user&gt; libvirtd</div><div class="line">sudo adduser &lt;user&gt; kvm</div></pre></td></tr></table></figure></p>
<p>Check if everything is ok:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo virsh -c qemu:///system list</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题出现环境&quot;&gt;&lt;a href=&quot;#问题出现环境&quot; class=&quot;headerlink&quot; title=&quot;问题出现环境&quot;&gt;&lt;/a&gt;问题出现环境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Ubuntu 12.04&lt;/li&gt;
&lt;li&gt;Android Studio 2.2.2&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;解决步骤&quot;&gt;&lt;a href=&quot;#解决步骤&quot; class=&quot;headerlink&quot; title=&quot;解决步骤&quot;&gt;&lt;/a&gt;解决步骤&lt;/h2&gt;&lt;h3 id=&quot;开启VT-x&quot;&gt;&lt;a href=&quot;#开启VT-x&quot; class=&quot;headerlink&quot; title=&quot;开启VT-x&quot;&gt;&lt;/a&gt;开启VT-x&lt;/h3&gt;&lt;p&gt;在ubuntu上使用Android Studio创建模拟器时，会提示一个错误：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;/dev/kvm is not found&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;并且提示要在&lt;em&gt;BIOS&lt;/em&gt;里面开启&lt;font size=&quot;4em&quot;&gt;&lt;strong&gt;VT-x&lt;/strong&gt;&lt;/font&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ubuntu" scheme="http://yoursite.com/tags/ubuntu/"/>
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="android studio" scheme="http://yoursite.com/tags/android-studio/"/>
    
  </entry>
  
  <entry>
    <title>https双向验证功能的实现</title>
    <link href="http://yoursite.com/2016/11/28/android-https-verify-ways/"/>
    <id>http://yoursite.com/2016/11/28/android-https-verify-ways/</id>
    <published>2016-11-28T00:51:23.000Z</published>
    <updated>2017-05-25T03:41:18.231Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍一个简单echo服务器的实现，服务端用nodejs，客户端用android。</p>
<h2 id="用openssl一系列证书"><a href="#用openssl一系列证书" class="headerlink" title="用openssl一系列证书"></a><font size="6em">用openssl一系列证书</font></h2><h3 id="生成自己的CA根证书"><a href="#生成自己的CA根证书" class="headerlink" title="生成自己的CA根证书"></a><font size="5em">生成自己的CA根证书</font></h3><h4 id="生成跟证书私钥ca-key"><a href="#生成跟证书私钥ca-key" class="headerlink" title="生成跟证书私钥ca.key"></a><font size="4em">生成跟证书私钥ca.key</font></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ openssl genrsa -des3 -out ca.key 1024</div></pre></td></tr></table></figure>
<h4 id="生成X-509证书签名请求文件ca-csr"><a href="#生成X-509证书签名请求文件ca-csr" class="headerlink" title="生成X.509证书签名请求文件ca.csr"></a><font size="4em">生成X.509证书签名请求文件ca.csr</font></h4><p>在生成ca.csr的过程中，会让输入一些组织信息等。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ openssl req -new -key ca.key -out ca.csr</div></pre></td></tr></table></figure></p>
<a id="more"></a> 
<p>输出如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">Enter pass phrase for ca.key:</div><div class="line">You are about to be asked to enter information that will be incorporated</div><div class="line">into your certificate request.</div><div class="line">What you are about to enter is what is called a Distinguished Name or a DN.</div><div class="line">There are quite a few fields but you can leave some blank</div><div class="line">For some fields there will be a default value,</div><div class="line">If you enter &apos;.&apos;, the field will be left blank.</div><div class="line">-----</div><div class="line">Country Name (2 letter code) [AU]:CN</div><div class="line">State or Province Name (full name) [Some-State]:GuangDong</div><div class="line">Locality Name (eg, city) []:ShenZhen</div><div class="line">Organization Name (eg, company) [Internet Widgits Pty Ltd]:IBoxPay</div><div class="line">Organizational Unit Name (eg, section) []:IBoxPay</div><div class="line">Common Name (e.g. server FQDN or YOUR name) []:</div><div class="line">Email Address []:admin@iboxpay.com</div><div class="line"></div><div class="line">Please enter the following &apos;extra&apos; attributes</div><div class="line">to be sent with your certificate request</div><div class="line">A challenge password []:</div><div class="line">An optional company name []:</div></pre></td></tr></table></figure></p>
<h4 id="生成X-509格式的CA根证书ca-crt"><a href="#生成X-509格式的CA根证书ca-crt" class="headerlink" title="生成X.509格式的CA根证书ca.crt"></a><font size="4em">生成X.509格式的CA根证书ca.crt</font></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ openssl x509 -req -days 365 -in ca.csr -out ca.crt -signkey ca.key</div></pre></td></tr></table></figure>
<p>输出如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Signature ok</div><div class="line">subject=/C=CN/ST=GuangDong/L=ShenZhen/O=IBoxPay/OU=IBoxPay/emailAddress=admin@iboxpay.com</div><div class="line">Getting Private key</div><div class="line">Enter pass phrase for ca.key:</div></pre></td></tr></table></figure></p>
<h3 id="生成服务端的证书"><a href="#生成服务端的证书" class="headerlink" title="生成服务端的证书"></a><font size="5em">生成服务端的证书</font></h3><h4 id="生成服务端私钥文件-server-key"><a href="#生成服务端私钥文件-server-key" class="headerlink" title="生成服务端私钥文件 server.key"></a><font size="4em">生成服务端私钥文件 server.key</font></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ openssl genrsa -des3 -out server.key 1024</div></pre></td></tr></table></figure>
<h4 id="服务端需要向CA机构申请签名证书，在申请签名证书之前依然是创建自己的证书签名请求文件server-csr"><a href="#服务端需要向CA机构申请签名证书，在申请签名证书之前依然是创建自己的证书签名请求文件server-csr" class="headerlink" title="服务端需要向CA机构申请签名证书，在申请签名证书之前依然是创建自己的证书签名请求文件server.csr"></a><font size="4em">服务端需要向CA机构申请签名证书，在申请签名证书之前依然是创建自己的证书签名请求文件server.csr</font></h4><p>这一步需要填写一个组织信息，不要跟根证书的组织的一样。另外Common Name填一个自己的域名（如果没有实际的域名也可以写，后面在/etc/hosts映射一个，我写的就是yinlijun.com），不要填localhost，android会报错。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl req -new -key server.key -out server.csr</div></pre></td></tr></table></figure></p>
<p>输出如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">Enter pass phrase for server.key:</div><div class="line">You are about to be asked to enter information that will be incorporated</div><div class="line">into your certificate request.</div><div class="line">What you are about to enter is what is called a Distinguished Name or a DN.</div><div class="line">There are quite a few fields but you can leave some blank</div><div class="line">For some fields there will be a default value,</div><div class="line">If you enter &apos;.&apos;, the field will be left blank.</div><div class="line">-----</div><div class="line">Country Name (2 letter code) [AU]:CN</div><div class="line">State or Province Name (full name) [Some-State]:GuangDong</div><div class="line">Locality Name (eg, city) []:ShenZhen</div><div class="line">Organization Name (eg, company) [Internet Widgits Pty Ltd]:yinlijun</div><div class="line">Organizational Unit Name (eg, section) []:yinlijun</div><div class="line">Common Name (e.g. server FQDN or YOUR name) []:yinlijun.com</div><div class="line">Email Address []:admin@yinlijun.com</div><div class="line"></div><div class="line">Please enter the following &apos;extra&apos; attributes</div><div class="line">to be sent with your certificate request</div><div class="line">A challenge password []:</div></pre></td></tr></table></figure></p>
<h4 id="删除私钥的密码，这一步非常重要，一定要执行-否则会影响后面的步骤。"><a href="#删除私钥的密码，这一步非常重要，一定要执行-否则会影响后面的步骤。" class="headerlink" title="删除私钥的密码，这一步非常重要，一定要执行,否则会影响后面的步骤。"></a><font size="4em">删除私钥的密码，这一步非常<strong>重要</strong>，一定要执行,否则会影响后面的步骤。</font></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cp server.key server.key.passphrase</div><div class="line">$ openssl rsa -in server.key.passphrase -out server.key</div></pre></td></tr></table></figure>
<p>输出如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Enter pass phrase for server.key.passphrase:</div><div class="line">writing RSA key</div></pre></td></tr></table></figure></p>
<h4 id="签发服务器证书server-crt："><a href="#签发服务器证书server-crt：" class="headerlink" title="签发服务器证书server.crt："></a><font size="4em">签发服务器证书server.crt：</font></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt</div></pre></td></tr></table></figure>
<p>输出如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Signature ok</div><div class="line">subject=/C=CN/ST=GuangDong/L=ShenZhen/O=yinlijun/OU=yinlijun/CN=yinlijun.com/emailAddress=admin@yinlijun.com</div><div class="line">Getting Private key</div></pre></td></tr></table></figure></p>
<p>到现在为止，你目录下的文件应该有：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">ls -la</div><div class="line">total 36</div><div class="line">drwxr-xr-x  2 user user 4096 Sep  5 16:19 .</div><div class="line">drwxr-xr-x 12 user user 4096 Sep  5 16:09 ..</div><div class="line">-rw-r--r--  1 user user  757 Sep  5 16:12 ca.crt</div><div class="line">-rw-r--r--  1 user user  603 Sep  5 16:10 ca.csr</div><div class="line">-rw-r--r--  1 user user  963 Sep  5 16:09 ca.key</div><div class="line">-rw-r--r--  1 user user  757 Sep  5 16:19 server.crt</div><div class="line">-rw-r--r--  1 user user  603 Sep  5 16:16 server.csr</div><div class="line">-rw-r--r--  1 user user  887 Sep  5 16:18 server.key</div><div class="line">-rw-r--r--  1 user user  951 Sep  5 16:17 server.key.passphrase</div></pre></td></tr></table></figure></p>
<h4 id="生成之后察看服务器证书信息。"><a href="#生成之后察看服务器证书信息。" class="headerlink" title="生成之后察看服务器证书信息。"></a>生成之后察看服务器证书信息。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl x509 -in server.crt -text -noout</div></pre></td></tr></table></figure>
<h4 id="生成服务器的pfx文件，这个文件node服务器要用到。"><a href="#生成服务器的pfx文件，这个文件node服务器要用到。" class="headerlink" title="生成服务器的pfx文件，这个文件node服务器要用到。"></a>生成服务器的pfx文件，这个文件node服务器要用到。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl pkcs12 -export -in server.crt -inkey server.key -certfile ca.crt -out server.pfx</div></pre></td></tr></table></figure>
<p>输出如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Enter Export Password:</div><div class="line">Verifying - Enter Export Password:</div></pre></td></tr></table></figure></p>
<h4 id="生成服务端的p12文件。，这个是为了生成服务端bks文件用的"><a href="#生成服务端的p12文件。，这个是为了生成服务端bks文件用的" class="headerlink" title="生成服务端的p12文件。，这个是为了生成服务端bks文件用的"></a>生成服务端的p12文件。，这个是为了生成服务端bks文件用的</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl pkcs12 -export -clcerts -in server.crt -inkey server.key -out server.p12</div></pre></td></tr></table></figure>
<h3 id="下载一个bcprov-jdk16-141-jar，也是为了生成服务端bks文件要用到的。"><a href="#下载一个bcprov-jdk16-141-jar，也是为了生成服务端bks文件要用到的。" class="headerlink" title="下载一个bcprov-jdk16-141.jar，也是为了生成服务端bks文件要用到的。"></a>下载一个bcprov-jdk16-141.jar，也是为了生成服务端bks文件要用到的。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">下载地址：[http://www.java2s.com/Code/JarDownload/bcprov/bcprov-jdk16-141.jar.zip](http://www.java2s.com/Code/JarDownload/bcprov/bcprov-jdk16-141.jar.zip)</div></pre></td></tr></table></figure>
<h3 id="生成服务端的bks文件，这个android程序要用到"><a href="#生成服务端的bks文件，这个android程序要用到" class="headerlink" title="生成服务端的bks文件，这个android程序要用到"></a>生成服务端的bks文件，这个android程序要用到</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">keytool -importkeystore -srckeystore server.p12 -srcstoretype pkcs12 -destkeystore server.bks -deststoretype bks -provider org.bouncycastle.jce.provider.BouncyCastleProvider -providerpath bcprov-jdk16-141.jar</div></pre></td></tr></table></figure>
<p>输出如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">输入目标密钥库口令:  </div><div class="line">再次输入新密码: </div><div class="line">输入源密钥库口令:  </div><div class="line">已成功导入别名 1 项。</div><div class="line">已完成导入命令: 1 项成功导入，0 项失败或取消</div></pre></td></tr></table></figure></p>
<p>因为要进行双向验证，还需要生成客户端证书。</p>
<h4 id="生成客户端密钥"><a href="#生成客户端密钥" class="headerlink" title="生成客户端密钥"></a>生成客户端密钥</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl genrsa -des3 -out client.key 1024</div></pre></td></tr></table></figure>
<h4 id="生成客户端证书请求签名文件"><a href="#生成客户端证书请求签名文件" class="headerlink" title="生成客户端证书请求签名文件"></a>生成客户端证书请求签名文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl req -new -out client.csr -key client.key</div></pre></td></tr></table></figure>
<p>输出如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">Enter pass phrase for client.key:</div><div class="line">You are about to be asked to enter information that will be incorporated</div><div class="line">into your certificate request.</div><div class="line">What you are about to enter is what is called a Distinguished Name or a DN.</div><div class="line">There are quite a few fields but you can leave some blank</div><div class="line">For some fields there will be a default value,</div><div class="line">If you enter &apos;.&apos;, the field will be left blank.</div><div class="line">-----</div><div class="line">Country Name (2 letter code) [AU]:CN</div><div class="line">State or Province Name (full name) [Some-State]:GuangDong </div><div class="line">Locality Name (eg, city) []:ShenZhen</div><div class="line">Organization Name (eg, company) [Internet Widgits Pty Ltd]:ruochen</div><div class="line">Organizational Unit Name (eg, section) []:ruochen</div><div class="line">Common Name (e.g. server FQDN or YOUR name) []:</div><div class="line">Email Address []:admin@ruochen.com</div><div class="line"></div><div class="line">Please enter the following &apos;extra&apos; attributes</div><div class="line">to be sent with your certificate request</div><div class="line">A challenge password []:</div><div class="line">An optional company name []:</div></pre></td></tr></table></figure></p>
<h4 id="创建一个自当前日期起有效期为十年的客户端证书，需要根证书和根密钥参与。"><a href="#创建一个自当前日期起有效期为十年的客户端证书，需要根证书和根密钥参与。" class="headerlink" title="创建一个自当前日期起有效期为十年的客户端证书，需要根证书和根密钥参与。"></a>创建一个自当前日期起有效期为十年的客户端证书，需要根证书和根密钥参与。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl x509 -req -in client.csr -out client.cert -signkey client.key -CA ca.crt -CAkey ca.key -CAcreateserial -days 3650</div></pre></td></tr></table></figure>
<p>输入如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Signature ok</div><div class="line">subject=/C=CN/ST=GuangDong/L=ShenZhen/O=ruochen/OU=ruochen/emailAddress=admin@ruochen.com</div><div class="line">Getting Private key</div><div class="line">Enter pass phrase for client.key:</div><div class="line">Getting CA Private Key</div><div class="line">Enter pass phrase for ca.key:</div><div class="line">yinlijun@yinlijun:~/personal_github/echo-https-server/keys$ ls</div><div class="line">ca.crt  ca.csr  ca.key  ca.srl  client.cert  client.csr  client.key  server.crt  server.csr  server.key  server.key.passphrase  server.pfx</div><div class="line">yinlijun@yinlijun:~/personal_github/echo-https-server/keys$ openssl pkcs12 -export -clcerts -in client.cert -inkey client.key -out client.p12</div><div class="line">Enter pass phrase for client.key:</div><div class="line">Enter Export Password:</div><div class="line">Verifying - Enter Export Password:</div></pre></td></tr></table></figure></p>
<h4 id="生成浏览器支持的p12文件"><a href="#生成浏览器支持的p12文件" class="headerlink" title="生成浏览器支持的p12文件"></a>生成浏览器支持的p12文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl pkcs12 -export -clcerts -in client.cert -inkey client.key -out client.p12</div></pre></td></tr></table></figure>
<h4 id="将客户端证书文件client-crt和客户端证书密钥文件client-key合并成客户端证书安装包client-pfx"><a href="#将客户端证书文件client-crt和客户端证书密钥文件client-key合并成客户端证书安装包client-pfx" class="headerlink" title="将客户端证书文件client.crt和客户端证书密钥文件client.key合并成客户端证书安装包client.pfx"></a>将客户端证书文件client.crt和客户端证书密钥文件client.key合并成客户端证书安装包client.pfx</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl pkcs12 -export -in client.crt -inkey client.key -out client.pfx</div></pre></td></tr></table></figure>
<p>以上的文件我只用到了一部分，应该有替代关系，具体我也搞不清楚:)。 不同的实现方式有用到不同的文件。<br>我的android客户端用到了</p>
<ul>
<li>server.bks</li>
<li>client.p12</li>
</ul>
<p>看了网上的一些例子，好像server.bks可以用server.crt替代。</p>
<p>node用到了</p>
<ul>
<li>server.pfx</li>
</ul>
<p>察看node的文档，server.pfx可以用server.crt和server.key替代。</p>
<h2 id="服务端（nodejs）的代码"><a href="#服务端（nodejs）的代码" class="headerlink" title="服务端（nodejs）的代码"></a>服务端（nodejs）的代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> https =<span class="built_in">require</span>(<span class="string">'https'</span>), fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> options = &#123;</div><div class="line">    key: fs.readFileSync(<span class="string">'./keys/server.key'</span>),</div><div class="line">    cert: fs.readFileSync(<span class="string">'./keys/server.crt'</span>),</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"><span class="keyword">var</span> server = https.createServer(options, app);</div><div class="line">server.listen(<span class="number">443</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Https server listening on port '</span> + <span class="number">443</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="android应用自有证书的验证方式"><a href="#android应用自有证书的验证方式" class="headerlink" title="android应用自有证书的验证方式"></a>android应用自有证书的验证方式</h2><p>将服务端证书拷贝到app资源目录下，一般是<project_dir>/assets/server.crt</project_dir></p>
<h3 id="方法一：直接根据server-crt初始化TrustManagerFactory"><a href="#方法一：直接根据server-crt初始化TrustManagerFactory" class="headerlink" title="方法一：直接根据server.crt初始化TrustManagerFactory"></a>方法一：直接根据server.crt初始化TrustManagerFactory</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">    CertificateFactory cf = CertificateFactory.getInstance(<span class="string">"X.509"</span>);</div><div class="line">    InputStream caInput = <span class="keyword">new</span> BufferedInputStream(getAssets().open(<span class="string">"server.crt"</span>));</div><div class="line">    <span class="keyword">final</span> Certificate ca;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        ca = cf.generateCertificate(caInput);</div><div class="line">        Log.i(TAG, <span class="string">"ca="</span> + ((X509Certificate) ca).getSubjectDN());</div><div class="line">        Log.i(TAG, <span class="string">"key="</span> + ((X509Certificate) ca).getPublicKey());</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        caInput.close();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    String keyStoreType = KeyStore.getDefaultType();</div><div class="line">    Log.d(TAG, <span class="string">"keystore type:"</span> + keyStoreType);</div><div class="line">    KeyStore keyStore = KeyStore.getInstance(keyStoreType);</div><div class="line">    keyStore.load(<span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">    keyStore.setCertificateEntry(<span class="string">"cert"</span>, ca);</div><div class="line"></div><div class="line">    String tmfAlgorithm = TrustManagerFactory.getDefaultAlgorithm();</div><div class="line">    Log.d(TAG, <span class="string">"tmfAlgorithm:"</span> + tmfAlgorithm);</div><div class="line">    TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(tmfAlgorithm);</div><div class="line">    trustManagerFactory.init(keyStore);</div><div class="line"></div><div class="line">    mSSLContext = SSLContext.getInstance(<span class="string">"TLS"</span>);</div><div class="line">    mSSLContext.init(<span class="keyword">null</span>, trustManagerFactory.getTrustManagers(), <span class="keyword">null</span>);</div><div class="line"></div><div class="line">    URL url = <span class="keyword">new</span> URL(<span class="string">"https://yinlijun.com"</span>);</div><div class="line">    HttpsURLConnection urlConnection =</div><div class="line">            (HttpsURLConnection)url.openConnection();</div><div class="line">    urlConnection.setSSLSocketFactory(mSSLContext.getSocketFactory());</div><div class="line">    InputStream in = urlConnection.getInputStream();</div><div class="line">    copyInputStreamToOutputStream(in, System.out);</div><div class="line">&#125; <span class="keyword">catch</span> (CertificateException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125; <span class="keyword">catch</span> (KeyManagementException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125; <span class="keyword">catch</span> (KeyStoreException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>copyInputStreamToOutputStream方法如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">copyInputStreamToOutputStream</span><span class="params">(InputStream in, PrintStream out)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">    <span class="keyword">int</span> c = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> ((c = in.read(buffer)) != -<span class="number">1</span>) &#123;</div><div class="line">        out.write(buffer, <span class="number">0</span>, c);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    CertificateFactory cf = CertificateFactory.getInstance(<span class="string">"X.509"</span>);</div><div class="line">    InputStream caInput = <span class="keyword">new</span> BufferedInputStream(getAssets().open(<span class="string">"server.crt"</span>));</div><div class="line">    <span class="keyword">final</span> Certificate ca;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        ca = cf.generateCertificate(caInput);</div><div class="line">        Log.i(<span class="string">"Longer"</span>, <span class="string">"ca="</span> + ((X509Certificate) ca).getSubjectDN());</div><div class="line">        Log.i(<span class="string">"Longer"</span>, <span class="string">"key="</span> + ((X509Certificate) ca).getPublicKey());</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        caInput.close();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Create an SSLContext that uses our TrustManager</span></div><div class="line">    SSLContext context = SSLContext.getInstance(<span class="string">"TLSv1"</span>,<span class="string">"AndroidOpenSSL"</span>);</div><div class="line">    context.init(<span class="keyword">null</span>, <span class="keyword">new</span> TrustManager[]&#123;</div><div class="line">            <span class="keyword">new</span> X509TrustManager() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkClientTrusted</span><span class="params">(X509Certificate[] chain,</span></span></div><div class="line">                                                String authType)</div><div class="line">                        <span class="keyword">throws</span> CertificateException &#123;</div><div class="line"></div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkServerTrusted</span><span class="params">(X509Certificate[] chain,</span></span></div><div class="line">                                                String authType)</div><div class="line">                        <span class="keyword">throws</span> CertificateException &#123;</div><div class="line">                    <span class="keyword">for</span> (X509Certificate cert : chain) &#123;</div><div class="line"></div><div class="line">                        <span class="comment">// Make sure that it hasn't expired.</span></div><div class="line">                        cert.checkValidity();</div><div class="line"></div><div class="line">                        <span class="comment">// Verify the certificate's public key chain.</span></div><div class="line">                        <span class="keyword">try</span> &#123;</div><div class="line">                            cert.verify(((X509Certificate) ca).getPublicKey());</div><div class="line">                        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</div><div class="line">                            e.printStackTrace();</div><div class="line">                        &#125; <span class="keyword">catch</span> (InvalidKeyException e) &#123;</div><div class="line">                            e.printStackTrace();</div><div class="line">                        &#125; <span class="keyword">catch</span> (NoSuchProviderException e) &#123;</div><div class="line">                            e.printStackTrace();</div><div class="line">                        &#125; <span class="keyword">catch</span> (SignatureException e) &#123;</div><div class="line">                            e.printStackTrace();</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="keyword">public</span> X509Certificate[] getAcceptedIssuers() &#123;</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> X509Certificate[<span class="number">0</span>];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">    &#125;, <span class="keyword">null</span>);</div><div class="line"></div><div class="line">    URL url = <span class="keyword">new</span> URL(<span class="string">"https://yinlijun.com/"</span>);</div><div class="line">    HttpsURLConnection urlConnection =</div><div class="line">            (HttpsURLConnection)url.openConnection();</div><div class="line">    urlConnection.setSSLSocketFactory(context.getSocketFactory());</div><div class="line">    InputStream in = urlConnection.getInputStream();</div><div class="line">    copyInputStreamToOutputStream(in, System.out);</div></pre></td></tr></table></figure>
<h2 id="双向认证"><a href="#双向认证" class="headerlink" title="双向认证"></a>双向认证</h2><p>单向验证只能验证服务器，如果服务器也想对客户端进行验证，即所谓（双向验证），需要在连接是一起发送客户端证书。</p>
<h3 id="双向认证，服务器代码"><a href="#双向认证，服务器代码" class="headerlink" title="双向认证，服务器代码"></a>双向认证，服务器代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> tls = <span class="built_in">require</span>(<span class="string">'tls'</span>);</div><div class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> options = &#123;</div><div class="line">  pfx: fs.readFileSync(<span class="string">'./server.pfx'</span>),</div><div class="line">  passphrase: <span class="string">"123456"</span>,</div><div class="line">  <span class="comment">// This is necessary only if using the client certificate authentication.</span></div><div class="line">  requestCert: <span class="literal">true</span>,</div><div class="line">  rejectUnauthorized: <span class="literal">true</span> <span class="comment">//如果接受也非认证链接，可以删除此行。</span></div><div class="line">&#125;;</div><div class="line"><span class="comment">//需要双向认证才需要配置requestCert为true。</span></div><div class="line"><span class="keyword">const</span> server = tls.createServer(options, (socket) =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'server connected'</span>,</div><div class="line">              socket.authorized ? <span class="string">'authorized'</span> : <span class="string">'unauthorized'</span>);</div><div class="line">  socket.setEncoding(<span class="string">'utf8'</span>);</div><div class="line">  socket.on(<span class="string">'data'</span>, (data) =&gt; &#123;</div><div class="line">      <span class="built_in">console</span>.log(data);</div><div class="line">      socket.write(data);</div><div class="line">  &#125;);</div><div class="line">  socket.on(<span class="string">'end'</span>, (socket) =&gt; &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"socket closed"</span>);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div><div class="line">server.listen(<span class="number">8000</span>, () =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'server bound'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="双向认证，android的代码，实现方式一"><a href="#双向认证，android的代码，实现方式一" class="headerlink" title="双向认证，android的代码，实现方式一"></a>双向认证，android的代码，实现方式一</h3><p>server.pfx和client.p12放到<project_dir>/assets/目录下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    KeyStore trustStore = KeyStore.getInstance(<span class="string">"bks"</span>);</div><div class="line">    InputStream tsIn = getResources().getAssets().open(<span class="string">"server.bks"</span>);</div><div class="line"></div><div class="line">    KeyStore keyStore = KeyStore.getInstance(<span class="string">"PKCS12"</span>);</div><div class="line">    InputStream ksIn = getResources().getAssets().open(<span class="string">"client.p12"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        keyStore.load(ksIn, <span class="string">"123456"</span>.toCharArray());</div><div class="line">        trustStore.load(tsIn, <span class="string">"123456"</span>.toCharArray());</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            ksIn.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception ignore) &#123;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            tsIn.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception ignore) &#123;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(<span class="string">"X509"</span>);</div><div class="line">    keyManagerFactory.init(keyStore, <span class="string">"123456"</span>.toCharArray());</div><div class="line">    TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());</div><div class="line">    trustManagerFactory.init(trustStore);</div><div class="line">    mSSLContext = SSLContext.getInstance(<span class="string">"TLS"</span>);</div><div class="line">    mSSLContext.init(<span class="keyword">null</span>, trustManagerFactory.getTrustManagers(), <span class="keyword">null</span>);</div><div class="line"></div><div class="line">    mSSLSocket = (SSLSocket) mSSLContext.getSocketFactory().createSocket(<span class="string">"yinlijun.com"</span>, <span class="number">8000</span>);</div><div class="line">    mSSLSocket.startHandshake();</div><div class="line">    <span class="comment">//...</span></div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125; <span class="keyword">catch</span> (KeyManagementException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125; <span class="keyword">catch</span> (KeyStoreException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125; <span class="keyword">catch</span> (UnrecoverableKeyException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure></project_dir></p>
<h3 id="双向认证，android的代码，实现方式2，用server-crt替代server-bks"><a href="#双向认证，android的代码，实现方式2，用server-crt替代server-bks" class="headerlink" title="双向认证，android的代码，实现方式2，用server.crt替代server.bks"></a>双向认证，android的代码，实现方式2，用server.crt替代server.bks</h3><p>server.crt和client.p12放到<project_dir>/assets/目录下</project_dir></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    CertificateFactory cf = CertificateFactory.getInstance(<span class="string">"X.509"</span>);</div><div class="line">    InputStream caInput = <span class="keyword">new</span> BufferedInputStream(getAssets().open(<span class="string">"server.crt"</span>));</div><div class="line">    <span class="keyword">final</span> Certificate ca;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        ca = cf.generateCertificate(caInput);</div><div class="line">        Log.i(<span class="string">"Longer"</span>, <span class="string">"ca="</span> + ((X509Certificate) ca).getSubjectDN());</div><div class="line">        Log.i(<span class="string">"Longer"</span>, <span class="string">"key="</span> + ((X509Certificate) ca).getPublicKey());</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        caInput.close();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    KeyStore keyStore = KeyStore.getInstance(<span class="string">"PKCS12"</span>);</div><div class="line">    InputStream ksIn = getResources().getAssets().open(<span class="string">"client.p12"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        keyStore.load(ksIn, <span class="string">"123456"</span>.toCharArray());</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            ksIn.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception ignore) &#123;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(<span class="string">"X509"</span>);</div><div class="line">    keyManagerFactory.init(keyStore, <span class="string">"123456"</span>.toCharArray());</div><div class="line"></div><div class="line">    <span class="comment">// Create an SSLContext that uses our TrustManager</span></div><div class="line">    SSLContext context = SSLContext.getInstance(<span class="string">"TLSv1"</span>,<span class="string">"AndroidOpenSSL"</span>);</div><div class="line">    context.init(keyManagerFactory.getKeyManagers(), <span class="keyword">new</span> TrustManager[]&#123;</div><div class="line">            <span class="keyword">new</span> X509TrustManager() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkClientTrusted</span><span class="params">(X509Certificate[] chain,</span></span></div><div class="line">                                                String authType)</div><div class="line">                        <span class="keyword">throws</span> CertificateException &#123;</div><div class="line"></div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkServerTrusted</span><span class="params">(X509Certificate[] chain,</span></span></div><div class="line">                                                String authType)</div><div class="line">                        <span class="keyword">throws</span> CertificateException &#123;</div><div class="line">                    <span class="keyword">for</span> (X509Certificate cert : chain) &#123;</div><div class="line"></div><div class="line">                        <span class="comment">// Make sure that it hasn't expired.</span></div><div class="line">                        cert.checkValidity();</div><div class="line"></div><div class="line">                        <span class="comment">// Verify the certificate's public key chain.</span></div><div class="line">                        <span class="keyword">try</span> &#123;</div><div class="line">                            cert.verify(((X509Certificate) ca).getPublicKey());</div><div class="line">                        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</div><div class="line">                            e.printStackTrace();</div><div class="line">                        &#125; <span class="keyword">catch</span> (InvalidKeyException e) &#123;</div><div class="line">                            e.printStackTrace();</div><div class="line">                        &#125; <span class="keyword">catch</span> (NoSuchProviderException e) &#123;</div><div class="line">                            e.printStackTrace();</div><div class="line">                        &#125; <span class="keyword">catch</span> (SignatureException e) &#123;</div><div class="line">                            e.printStackTrace();</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="keyword">public</span> X509Certificate[] getAcceptedIssuers() &#123;</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> X509Certificate[<span class="number">0</span>];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">    &#125;, <span class="keyword">null</span>);</div><div class="line">    <span class="comment">//...</span></div></pre></td></tr></table></figure>
<p>项目地址：</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li><a href="https://matoski.com/article/node-express-generate-ssl/" target="_blank" rel="external">How to generate self-signed certificate for usage in Express4 or Node.js HTTP</a></li>
<li><a href="http://blog.csdn.net/fyang2007/article/details/6180361" target="_blank" rel="external">SSL证书生成方法</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/22816331" target="_blank" rel="external">Android安全开发之安全使用HTTPS</a></li>
<li><a href="https://developer.android.com/training/articles/security-ssl.html#nogotofail" target="_blank" rel="external">通过 HTTPS 和 SSL 确保安全</a> (要翻墙)</li>
<li><a href="https://nodejs.org/api/tls.html" target="_blank" rel="external">https://nodejs.org/api/tls.html</a></li>
<li><a href="https://gist.github.com/Frank-Zhu/41e21a00df26d63cd38d" target="_blank" rel="external">https://gist.github.com/Frank-Zhu/41e21a00df26d63cd38d</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍一个简单echo服务器的实现，服务端用nodejs，客户端用android。&lt;/p&gt;
&lt;h2 id=&quot;用openssl一系列证书&quot;&gt;&lt;a href=&quot;#用openssl一系列证书&quot; class=&quot;headerlink&quot; title=&quot;用openssl一系列证书&quot;&gt;&lt;/a&gt;&lt;font size=&quot;6em&quot;&gt;用openssl一系列证书&lt;/font&gt;&lt;/h2&gt;&lt;h3 id=&quot;生成自己的CA根证书&quot;&gt;&lt;a href=&quot;#生成自己的CA根证书&quot; class=&quot;headerlink&quot; title=&quot;生成自己的CA根证书&quot;&gt;&lt;/a&gt;&lt;font size=&quot;5em&quot;&gt;生成自己的CA根证书&lt;/font&gt;&lt;/h3&gt;&lt;h4 id=&quot;生成跟证书私钥ca-key&quot;&gt;&lt;a href=&quot;#生成跟证书私钥ca-key&quot; class=&quot;headerlink&quot; title=&quot;生成跟证书私钥ca.key&quot;&gt;&lt;/a&gt;&lt;font size=&quot;4em&quot;&gt;生成跟证书私钥ca.key&lt;/font&gt;&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ openssl genrsa -des3 -out ca.key 1024&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;生成X-509证书签名请求文件ca-csr&quot;&gt;&lt;a href=&quot;#生成X-509证书签名请求文件ca-csr&quot; class=&quot;headerlink&quot; title=&quot;生成X.509证书签名请求文件ca.csr&quot;&gt;&lt;/a&gt;&lt;font size=&quot;4em&quot;&gt;生成X.509证书签名请求文件ca.csr&lt;/font&gt;&lt;/h4&gt;&lt;p&gt;在生成ca.csr的过程中，会让输入一些组织信息等。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ openssl req -new -key ca.key -out ca.csr&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="nodejs" scheme="http://yoursite.com/tags/nodejs/"/>
    
      <category term="https" scheme="http://yoursite.com/tags/https/"/>
    
      <category term="openssl" scheme="http://yoursite.com/tags/openssl/"/>
    
  </entry>
  
  <entry>
    <title>Match-react router 4.0.0 api中文文档</title>
    <link href="http://yoursite.com/2016/11/25/react-router-4-0-0-api-Match/"/>
    <id>http://yoursite.com/2016/11/25/react-router-4-0-0-api-Match/</id>
    <published>2016-11-25T05:05:50.000Z</published>
    <updated>2017-05-25T09:23:45.984Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://react-router.now.sh/Match" target="_blank" rel="external">原文链接</a></p>
<font size="1em">&lt;Match&gt;</font>

<p>匹配到地址(location)时进行UI渲染</p>
<h3 id="pattern-string"><a href="#pattern-string" class="headerlink" title="pattern: string"></a><font color="red">pattern: string</font></h3><p>任何<a href="https://www.npmjs.com/package/path-to-regexp" target="_blank" rel="external">path-to-regexp</a>可以理解的URL模式表达式<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Match</span> <span class="attr">pattern</span>=<span class="string">"/users/:id"</span> <span class="attr">component</span>=<span class="string">&#123;User&#125;/</span>&gt;</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h3 id="exactly-bool"><a href="#exactly-bool" class="headerlink" title="exactly: bool"></a><font color="red">exactly: bool</font></h3><p>当为true时，只有模式表达式严格匹配时，才算匹配上。</p>
<table>
<thead>
<tr>
<th>pattern</th>
<th style="text-align:center">location.pathname</th>
<th style="text-align:center">exactly?</th>
<th style="text-align:center">matches?</th>
</tr>
</thead>
<tbody>
<tr>
<td>/foo</td>
<td style="text-align:center">/foo/bar</td>
<td style="text-align:center">yes</td>
<td style="text-align:center">no</td>
</tr>
<tr>
<td>/foo</td>
<td style="text-align:center">/foo/bar</td>
<td style="text-align:center">no</td>
<td style="text-align:center">yes</td>
</tr>
</tbody>
</table>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Match</span> <span class="attr">pattern</span>=<span class="string">"/foo"</span> <span class="attr">exactly</span> <span class="attr">component</span>=<span class="string">&#123;Foo&#125;/</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="location"><a href="#location" class="headerlink" title="location"></a><font color="red">location</font></h3><p>如果你不想匹配上下文(context)中的地址(location)时，你可以传入一个location参数来替代。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Match</span> <span class="attr">pattern</span>=<span class="string">"/foo"</span> <span class="attr">location</span>=<span class="string">&#123;&#123;</span> <span class="attr">pathname:</span> '/<span class="attr">foo</span>' &#125;&#125;/&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="component"><a href="#component" class="headerlink" title="component"></a><font color="red">component</font></h3><p>当匹配到地址时渲染的React组件，渲染该组件时，会传入如下属性(props)：</p>
<ul>
<li>pattern: (string) 匹配表达式.</li>
<li>pathname: (string) 匹配后的路径.</li>
<li>isExact: (bool) 是否严格匹配 (v. partial).</li>
<li>location: 匹配到的location对象.</li>
<li>params: 根据匹配模式解析出来的参数</li>
</ul>
<p>如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">const</span> &#123;params, pattern, pathname, isExact, location&#125; = <span class="keyword">this</span>.props;</div><div class="line">        <span class="keyword">return</span> (&lt;div&gt;</div><div class="line">            &lt;h2&gt;User&lt;/h2&gt;</div><div class="line">            &lt;div&gt;</div><div class="line">                location:&#123;JSON.stringify(location)&#125;</div><div class="line">                &lt;br /&gt;</div><div class="line">                pattern:&#123;pattern&#125;</div><div class="line">                &lt;br /&gt;</div><div class="line">                pathname:&#123;pathname&#125;</div><div class="line">                &lt;br /&gt;</div><div class="line">                isExact:&#123;isExact ? "true" : "false"&#125;</div><div class="line">                &lt;br /&gt;</div><div class="line">                params:&#123;JSON.stringify(params, null, 2)&#125;</div><div class="line">                &lt;br /&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">        &lt;/div&gt;)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&lt;Match pattern="/:user" component=&#123;User&#125;/&gt;</div></pre></td></tr></table></figure></p>
<p>效果如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">location:&#123;&quot;pathname&quot;:&quot;/kim&quot;,&quot;search&quot;:&quot;&quot;,&quot;hash&quot;:&quot;&quot;,&quot;state&quot;:null,&quot;query&quot;:null,&quot;key&quot;:&quot;a21zge&quot;&#125;</div><div class="line">pattern:/:user</div><div class="line">pathname:/kim</div><div class="line">isExact:true</div><div class="line">params:&#123; &quot;user&quot;: &quot;kim&quot; &#125;</div></pre></td></tr></table></figure></p>
<h3 id="render-func"><a href="#render-func" class="headerlink" title="render: func"></a><font color="red">render: func</font></h3><p>相对于直接渲染一个组件，你可以之间传一个渲染函数，该函数被调用时，会传入组件一样的参数。</p>
<p>这相当于提供了一种内联(inline rendering)渲染方式，或者对Match的封装(wrapping)。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 非常方便的内联渲染</span></div><div class="line">&lt;Match pattern=<span class="string">"/home"</span> render=&#123;() =&gt; <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>&#125;/&gt;</div><div class="line"></div><div class="line"><span class="comment">// 对Match进行封装</span></div><div class="line"><span class="keyword">const</span> MatchWithFade = (&#123; component:Component, ...rest &#125;) =&gt; (</div><div class="line">  &lt;Match &#123;...rest&#125; render=&#123;(matchProps) =&gt; (</div><div class="line">    &lt;FadeIn&gt;</div><div class="line">      &lt;Component &#123;...matchProps&#125;/&gt;</div><div class="line">    &lt;/FadeIn&gt;</div><div class="line">  )&#125;/&gt;</div><div class="line">)</div><div class="line"></div><div class="line">&lt;MatchWithFade pattern="/cool" component=&#123;Something&#125;/&gt;</div></pre></td></tr></table></figure></p>
<h3 id="children-func"><a href="#children-func" class="headerlink" title="children: func"></a><font color="red">children: func</font></h3><p>有时你可能需要根据匹配与否进行不同的渲染，这时，你可以使用children属性，它的类型为function，<br>它的表现有点象render函数，但是有以下不同：</p>
<p>(1) 不管有没有匹配上都会被调用。 </p>
<p>(2) 回传递一个matched属性表示有没有被匹配上。</p>
<p>It seems unlikely you’ll need this for anything besides animating when a component transitions from matching to not matching and back, but who knows?</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;Match children=&#123;(&#123; matched, ...rest&#125;) =&gt; (</div><div class="line">  &#123;<span class="comment">/* 因为Animate 总是能被渲染，所以你可以利用组件的生命周期(lifecycle)来实现动画。*/</span>&#125;</div><div class="line">  &lt;Animate&gt;</div><div class="line">    &#123;matched &amp;&amp; (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">Something</span> &#123;<span class="attr">...rest</span>&#125;/&gt;</span></span></div><div class="line">    )&#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">Animate</span>&gt;</span></div><div class="line">)&#125;/&gt;</div></pre></td></tr></table></figure>
<font size="6em">&lt;/Match&gt;</font>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://react-router.now.sh/Match&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文链接&lt;/a&gt;&lt;/p&gt;
&lt;font size=&quot;1em&quot;&gt;&amp;lt;Match&amp;gt;&lt;/font&gt;

&lt;p&gt;匹配到地址(location)时进行UI渲染&lt;/p&gt;
&lt;h3 id=&quot;pattern-string&quot;&gt;&lt;a href=&quot;#pattern-string&quot; class=&quot;headerlink&quot; title=&quot;pattern: string&quot;&gt;&lt;/a&gt;&lt;font color=&quot;red&quot;&gt;pattern: string&lt;/font&gt;&lt;/h3&gt;&lt;p&gt;任何&lt;a href=&quot;https://www.npmjs.com/package/path-to-regexp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;path-to-regexp&lt;/a&gt;可以理解的URL模式表达式&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Match&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;pattern&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;/users/:id&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;component&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;User&amp;#125;/&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="react router 4.0.0 api中文文档" scheme="http://yoursite.com/categories/react-router-4-0-0-api%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="react-router" scheme="http://yoursite.com/tags/react-router/"/>
    
      <category term="翻译文档" scheme="http://yoursite.com/tags/%E7%BF%BB%E8%AF%91%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>React组件生命周期</title>
    <link href="http://yoursite.com/2016/11/24/react-lifecycle/"/>
    <id>http://yoursite.com/2016/11/24/react-lifecycle/</id>
    <published>2016-11-24T07:23:54.000Z</published>
    <updated>2017-05-25T03:41:18.235Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://blog.flappyend.com/react-component-lifecycle/" target="_blank" rel="external">原文链接</a></p>
<h2 id="实例化"><a href="#实例化" class="headerlink" title="实例化"></a>实例化</h2><h3 id="首次实例化"><a href="#首次实例化" class="headerlink" title="首次实例化"></a>首次实例化</h3><ul>
<li>getDefaultProps</li>
<li>getInitialState</li>
<li>componentWillMount</li>
<li>render</li>
<li>componentDidMount</li>
</ul>
<a id="more"></a>
<h3 id="实例化完成后的更新"><a href="#实例化完成后的更新" class="headerlink" title="实例化完成后的更新"></a>实例化完成后的更新</h3><p>getInitialState<br>componentWillMount<br>render<br>componentDidMount</p>
<h2 id="存在期"><a href="#存在期" class="headerlink" title="存在期"></a>存在期</h2><h3 id="组件已存在时的状态改变"><a href="#组件已存在时的状态改变" class="headerlink" title="组件已存在时的状态改变"></a>组件已存在时的状态改变</h3><ul>
<li>componentWillReceiveProps</li>
<li>shouldComponentUpdate</li>
<li>componentWillUpdate</li>
<li>render</li>
<li>componentDidUpdate</li>
</ul>
<h2 id="销毁-amp-清理期"><a href="#销毁-amp-清理期" class="headerlink" title="销毁&amp;清理期"></a>销毁&amp;清理期</h2><ul>
<li>componentWillUnmount</li>
</ul>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>生命周期共提供了10个不同的API。</p>
<ol>
<li>getDefaultProps</li>
</ol>
<p>作用于组件类，只调用一次，返回对象用于设置默认的props，对于引用值，会在实例中共享。</p>
<ol>
<li>getInitialState</li>
</ol>
<p>作用于组件的实例，在实例创建时调用一次，用于初始化每个实例的state，此时可以访问this.props。</p>
<ol>
<li>componentWillMount</li>
</ol>
<p>在完成首次渲染之前调用，此时仍可以修改组件的state。</p>
<ol>
<li>render</li>
</ol>
<p>必选的方法，创建虚拟DOM，该方法具有特殊的规则：</p>
<ul>
<li>只能通过this.props和this.state访问数据</li>
<li>可以返回null、false或任何React组件</li>
<li>只能出现一个顶级组件（不能返回数组）</li>
<li>不能改变组件的状态</li>
<li>不能修改DOM的输出</li>
</ul>
<ol>
<li>componentDidMount</li>
</ol>
<p>真实的DOM被渲染出来后调用，在该方法中可通过this.getDOMNode()访问到真实的DOM元素。此时已可以使用其他类库来操作这个DOM。</p>
<p><em>在服务端中，该方法不会被调用。</em></p>
<ol>
<li>componentWillReceiveProps</li>
</ol>
<p>组件接收到新的props时调用，并将其作为参数nextProps使用，此时可以更改组件props及state。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">componentWillReceiveProps: <span class="function"><span class="keyword">function</span>(<span class="params">nextProps</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (nextProps.bool) &#123;</div><div class="line">        <span class="keyword">this</span>.setState(&#123;</div><div class="line">            bool: <span class="literal">true</span></div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ol>
<li>shouldComponentUpdate</li>
</ol>
<p>组件是否应当渲染新的props或state，返回false表示跳过后续的生命周期方法，通常不需要使用以避免出现bug。在出现应用的瓶颈时，可通过该方法进行适当的优化。</p>
<p><em>在首次渲染期间或者调用了forceUpdate方法后，该方法不会被调用</em></p>
<ol>
<li>componentWillUpdate</li>
</ol>
<p>接收到新的props或者state后，进行渲染之前调用，此时不允许更新props或state。</p>
<ol>
<li>componentDidUpdate</li>
</ol>
<p>完成渲染新的props或者state后调用，此时可以访问到新的DOM元素。</p>
<ol>
<li>componentWillUnmount</li>
</ol>
<p>组件被移除之前被调用，可以用于做一些清理工作，在componentDidMount方法中添加的所有任务都需要在该方法中撤销，比如创建的定时器或添加的事件监听器。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li>React：引领未来的用户界面开发框架/寸志 范洪春 杨森 陈涌 译 – 电子工业出版社</li>
<li><a href="https://facebook.github.io/react/docs/component-specs.html" target="_blank" rel="external">Component Specs and Lifecycle190</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://blog.flappyend.com/react-component-lifecycle/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文链接&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;实例化&quot;&gt;&lt;a href=&quot;#实例化&quot; class=&quot;headerlink&quot; title=&quot;实例化&quot;&gt;&lt;/a&gt;实例化&lt;/h2&gt;&lt;h3 id=&quot;首次实例化&quot;&gt;&lt;a href=&quot;#首次实例化&quot; class=&quot;headerlink&quot; title=&quot;首次实例化&quot;&gt;&lt;/a&gt;首次实例化&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;getDefaultProps&lt;/li&gt;
&lt;li&gt;getInitialState&lt;/li&gt;
&lt;li&gt;componentWillMount&lt;/li&gt;
&lt;li&gt;render&lt;/li&gt;
&lt;li&gt;componentDidMount&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>BrowserRouter-react router 4.0.0 api中文文档</title>
    <link href="http://yoursite.com/2016/11/24/react-router-4-0-0-api-BrowserRouter/"/>
    <id>http://yoursite.com/2016/11/24/react-router-4-0-0-api-BrowserRouter/</id>
    <published>2016-11-24T06:54:00.000Z</published>
    <updated>2017-05-25T03:41:18.235Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://react-router.now.sh/BrowserRouter" target="_blank" rel="external">原文链接</a></p>
<font size="6em">&lt;BrowserRouter&gt;</font>

<p>保持你的界面与浏览器历史记录保持同步。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;BrowserRouter&gt;</div><div class="line">  &lt;App/&gt;</div><div class="line">&lt;/BrowserRouter&gt;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<font color="#FF0000">basename</font>

<p>所有路由的根URL，如果你的应用处于服务端的子目录, 你可以设置这个值为该子目录。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;BrowserRouter basename=&quot;/calendar&quot; /&gt;</div><div class="line"></div><div class="line">// 假设Link标签如下所示：</div><div class="line">&lt;Link to=&quot;/today&quot;/&gt;</div><div class="line">// 那么超链接指向 &quot;/calendar/today&quot;</div><div class="line">&lt;/BrowserRouter&gt;</div></pre></td></tr></table></figure>
<font size="6em">&lt;/BrowserRouter&gt;</font>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://react-router.now.sh/BrowserRouter&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文链接&lt;/a&gt;&lt;/p&gt;
&lt;font size=&quot;6em&quot;&gt;&amp;lt;BrowserRouter&amp;gt;&lt;/font&gt;

&lt;p&gt;保持你的界面与浏览器历史记录保持同步。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;BrowserRouter&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;lt;App/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/BrowserRouter&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="react router 4.0.0 api中文文档" scheme="http://yoursite.com/categories/react-router-4-0-0-api%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="react-router" scheme="http://yoursite.com/tags/react-router/"/>
    
      <category term="翻译文档" scheme="http://yoursite.com/tags/%E7%BF%BB%E8%AF%91%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>BrowserRouter-react router 4.0.0 api中文文档</title>
    <link href="http://yoursite.com/2016/11/24/react-router-4-0-0-api/"/>
    <id>http://yoursite.com/2016/11/24/react-router-4-0-0-api/</id>
    <published>2016-11-24T06:54:00.000Z</published>
    <updated>2017-05-25T03:41:18.236Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://react-router.now.sh/BrowserRouter" target="_blank" rel="external">原文链接</a></p>
<font size="5em">&lt;BrowserRouter&gt;</font>

<p>保持你的界面与浏览器历史记录保持同步。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;BrowserRouter&gt;</div><div class="line">  &lt;App/&gt;</div><div class="line">&lt;/BrowserRouter&gt;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<font color="#FF0000">basename</font>

<p>所有路由的根URL，如果你的应用处于服务端的子目录, 你可以设置这个值为该子目录。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;BrowserRouter basename=&quot;/calendar&quot; /&gt;</div><div class="line"></div><div class="line">// 假设Link标签如下所示：</div><div class="line">&lt;Link to=&quot;/today&quot;/&gt;</div><div class="line">// 那么超链接指向 &quot;/calendar/today&quot;</div><div class="line">&lt;/BrowserRouter&gt;</div></pre></td></tr></table></figure>
<font size="5em">&lt;/BrowserRouter&gt;</font>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://react-router.now.sh/BrowserRouter&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文链接&lt;/a&gt;&lt;/p&gt;
&lt;font size=&quot;5em&quot;&gt;&amp;lt;BrowserRouter&amp;gt;&lt;/font&gt;

&lt;p&gt;保持你的界面与浏览器历史记录保持同步。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;BrowserRouter&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;lt;App/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/BrowserRouter&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="react-router" scheme="http://yoursite.com/tags/react-router/"/>
    
      <category term="翻译文档" scheme="http://yoursite.com/tags/%E7%BF%BB%E8%AF%91%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu编译android 6.0源代码环境搭建</title>
    <link href="http://yoursite.com/2016/11/16/ubuntu%E7%BC%96%E8%AF%91android%E6%BA%90%E4%BB%A3%E7%A0%81%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2016/11/16/ubuntu编译android源代码环境搭建/</id>
    <published>2016-11-16T01:04:37.000Z</published>
    <updated>2017-05-25T03:41:18.237Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install openjdk-7-jdk openjdk-7-jre</div></pre></td></tr></table></figure>
<p>如果之前系统是其他版本的JDK，需要把环境变量切换过来。</p>
<a id="more"></a>
<p>jdk版本错误会导致编译错误，如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">prebuilts/sdk/api/23.txt:41822: error 9: Removed public constructor android.widget.Toolbar.LayoutParams.Toolbar.LayoutParams(LayoutParams)</div><div class="line">prebuilts/sdk/api/23.txt:41823: error 9: Removed public constructor android.widget.Toolbar.LayoutParams.Toolbar.LayoutParams(MarginLayoutParams)</div><div class="line">prebuilts/sdk/api/23.txt:41824: error 9: Removed public constructor android.widget.Toolbar.LayoutParams.Toolbar.LayoutParams(LayoutParams)</div><div class="line">prebuilts/sdk/api/23.txt:42895: error 9: Removed public constructor java.io.ObjectInputStream.GetField.ObjectInputStream.GetField()</div><div class="line">prebuilts/sdk/api/23.txt:42955: error 9: Removed public constructor java.io.ObjectOutputStream.PutField.ObjectOutputStream.PutField()</div><div class="line">prebuilts/sdk/api/23.txt:43623: error 9: Removed public constructor java.lang.Character.Subset.Character.Subset(String)</div><div class="line">prebuilts/sdk/api/23.txt:46730: error 9: Removed public constructor java.nio.channels.Pipe.SinkChannel.Pipe.SinkChannel(SelectorProvider)</div><div class="line">prebuilts/sdk/api/23.txt:46735: error 9: Removed public constructor java.nio.channels.Pipe.SourceChannel.Pipe.SourceChannel(SelectorProvider)</div><div class="line">prebuilts/sdk/api/23.txt:47370: error 9: Removed public constructor java.security.KeyStore.Builder.KeyStore.Builder()</div><div class="line">prebuilts/sdk/api/23.txt:47379: error 9: Removed public constructor java.security.KeyStore.CallbackHandlerProtection.KeyStore.CallbackHandlerProtection(CallbackHandler)</div><div class="line">prebuilts/sdk/api/23.txt:47391: error 9: Removed public constructor java.security.KeyStore.PasswordProtection.KeyStore.PasswordProtection(char)</div></pre></td></tr></table></figure></p>
<h2 id="安装其他工具包"><a href="#安装其他工具包" class="headerlink" title="安装其他工具包"></a>安装其他工具包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install git gitg gnupg flex bison gperf build-essential  zip curl libc6-dev  libncurses5-dev:i386 x11proto-core-dev  libx11-dev:i386 libreadline6-dev:i386   libgl1-mesa-dev g++-multilib mingw32 tofrodos python-markdown	libxml2-utils xsltproc zlib1g-dev:i386 libarchive-zip-perl</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装jdk&quot;&gt;&lt;a href=&quot;#安装jdk&quot; class=&quot;headerlink&quot; title=&quot;安装jdk&quot;&gt;&lt;/a&gt;安装jdk&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo apt-get install openjdk-7-jdk openjdk-7-jre&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果之前系统是其他版本的JDK，需要把环境变量切换过来。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ubuntu" scheme="http://yoursite.com/tags/ubuntu/"/>
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="环境搭建" scheme="http://yoursite.com/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>如何下载安装openJDK</title>
    <link href="http://yoursite.com/2016/11/15/how-to-download-openjdk/"/>
    <id>http://yoursite.com/2016/11/15/how-to-download-openjdk/</id>
    <published>2016-11-15T12:04:44.000Z</published>
    <updated>2017-05-25T03:41:18.234Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JDK-8"><a href="#JDK-8" class="headerlink" title="JDK 8"></a>JDK 8</h2><h3 id="Debian-Ubuntu"><a href="#Debian-Ubuntu" class="headerlink" title="Debian, Ubuntu"></a><strong>Debian, Ubuntu</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install openjdk-8-jre</div></pre></td></tr></table></figure>
<p>openjdk-8-jre只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装openjdk-8-jdk。</p>
<a id="more"></a>
<h3 id="Fedora-Oracle-Linux-Red-Hat-Enterprise-Linux"><a href="#Fedora-Oracle-Linux-Red-Hat-Enterprise-Linux" class="headerlink" title="Fedora, Oracle Linux, Red Hat Enterprise Linux"></a><strong>Fedora, Oracle Linux, Red Hat Enterprise Linux</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ su -c &quot;yum install java-1.8.0-openjdk&quot;</div></pre></td></tr></table></figure>
<p>java-1.8.0-openjdk只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装java-1.8.0-openjdk-devel。</p>
<h2 id="JDK-7"><a href="#JDK-7" class="headerlink" title="JDK 7"></a>JDK 7</h2><h3 id="Debian-Ubuntu-1"><a href="#Debian-Ubuntu-1" class="headerlink" title="Debian, Ubuntu"></a><strong>Debian, Ubuntu</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install openjdk-7-jre</div></pre></td></tr></table></figure>
<p>openjdk-7-jre只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装openjdk-7-jdk。</p>
<h3 id="Fedora-Oracle-Linux-Red-Hat-Enterprise-Linux-1"><a href="#Fedora-Oracle-Linux-Red-Hat-Enterprise-Linux-1" class="headerlink" title="Fedora, Oracle Linux, Red Hat Enterprise Linux"></a><strong>Fedora, Oracle Linux, Red Hat Enterprise Linux</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ su -c &quot;yum install java-1.7.0-openjdk&quot;</div></pre></td></tr></table></figure>
<p>java-1.7.0-openjdk只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装java-1.7.0-openjdk-devel。</p>
<h2 id="JDK-6"><a href="#JDK-6" class="headerlink" title="JDK 6"></a>JDK 6</h2><h3 id="Debian-Ubuntu-2"><a href="#Debian-Ubuntu-2" class="headerlink" title="Debian, Ubuntu"></a><strong>Debian, Ubuntu</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install openjdk-6-jre</div></pre></td></tr></table></figure>
<p>openjdk-6-jre只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装openjdk-6-jdk。</p>
<h3 id="Fedora-Oracle-Linux-Red-Hat-Enterprise-Linux-2"><a href="#Fedora-Oracle-Linux-Red-Hat-Enterprise-Linux-2" class="headerlink" title="Fedora, Oracle Linux, Red Hat Enterprise Linux"></a><strong>Fedora, Oracle Linux, Red Hat Enterprise Linux</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ su -c &quot;yum install java-1.6.0-openjdk&quot;</div></pre></td></tr></table></figure>
<p>java-1.6.0-openjdk只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装java-1.6.0-openjdk-devel。</p>
<p>参考<a href="http://openjdk.java.net/install/" target="_blank" rel="external">http://openjdk.java.net/install/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;JDK-8&quot;&gt;&lt;a href=&quot;#JDK-8&quot; class=&quot;headerlink&quot; title=&quot;JDK 8&quot;&gt;&lt;/a&gt;JDK 8&lt;/h2&gt;&lt;h3 id=&quot;Debian-Ubuntu&quot;&gt;&lt;a href=&quot;#Debian-Ubuntu&quot; class=&quot;headerlink&quot; title=&quot;Debian, Ubuntu&quot;&gt;&lt;/a&gt;&lt;strong&gt;Debian, Ubuntu&lt;/strong&gt;&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ sudo apt-get install openjdk-8-jre&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;openjdk-8-jre只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装openjdk-8-jdk。&lt;/p&gt;
    
    </summary>
    
    
      <category term="openjdk" scheme="http://yoursite.com/tags/openjdk/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu利用update-alternatives配置java</title>
    <link href="http://yoursite.com/2016/11/15/ubuntu%E5%88%A9%E7%94%A8update-alternatives%E9%85%8D%E7%BD%AEjava/"/>
    <id>http://yoursite.com/2016/11/15/ubuntu利用update-alternatives配置java/</id>
    <published>2016-11-15T11:32:21.000Z</published>
    <updated>2017-05-25T03:41:18.237Z</updated>
    
    <content type="html"><![CDATA[<p>利用Android Studio开发，经常会碰到JDK版本的切换问题，安装好新版本的<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="external">jdk</a>之后，需要先配置到可选项。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">yinlijun@sj:~$ sudo update-alternatives --install /usr/bin/java java /opt/jdk1.8.0_101/bin/java 100</div><div class="line">update-alternatives: 警告: /etc/alternatives/java has been changed (manually or by a script); switching to manual updates only</div><div class="line">yinlijun@sj:~$ sudo update-alternatives --install /usr/bin/javac javac /opt/jdk1.8.0_101/bin/javac 100</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>然后，选择默认的JDK版本：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">yinlijun@sj:~$ sudo update-alternatives --config java</div><div class="line">有 3 个候选项可用于替换 java (提供 /usr/bin/java)。</div><div class="line"></div><div class="line">  选择       路径                                          优先级  状态</div><div class="line">------------------------------------------------------------</div><div class="line">  0            /opt/jdk1.6.0_37/bin/java                        10000     自动模式</div><div class="line">  1            /opt/jdk1.6.0_37/bin/java                        10000     手动模式</div><div class="line">  2            /opt/jdk1.8.0_101/bin/java                       100       手动模式</div><div class="line">  3            /usr/lib/jvm/java-7-openjdk-amd64/jre/bin/java   1051      手动模式</div><div class="line"></div><div class="line">要维持当前值[*]请按回车键，或者键入选择的编号：2</div><div class="line">update-alternatives: using /opt/jdk1.8.0_101/bin/java to provide /usr/bin/java (java) <span class="keyword">in</span> 手动模式</div><div class="line">yinlijun@sj:~$ sudo update-alternatives --config javac</div><div class="line">有 3 个候选项可用于替换 javac (提供 /usr/bin/javac)。</div><div class="line"></div><div class="line">  选择       路径                                       优先级  状态</div><div class="line">------------------------------------------------------------</div><div class="line">  0            /opt/jdk1.6.0_37/bin/javac                    10000     自动模式</div><div class="line">  1            /opt/jdk1.6.0_37/bin/javac                    10000     手动模式</div><div class="line">  2            /opt/jdk1.8.0_101/bin/javac                   100       手动模式</div><div class="line">* 3            /usr/lib/jvm/java-7-openjdk-amd64/bin/javac   1051      手动模式</div><div class="line"></div><div class="line">要维持当前值[*]请按回车键，或者键入选择的编号：2</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;利用Android Studio开发，经常会碰到JDK版本的切换问题，安装好新版本的&lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jdk&lt;/a&gt;之后，需要先配置到可选项。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;yinlijun@sj:~$ sudo update-alternatives --install /usr/bin/java java /opt/jdk1.8.0_101/bin/java 100&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;update-alternatives: 警告: /etc/alternatives/java has been changed (manually or by a script); switching to manual updates only&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;yinlijun@sj:~$ sudo update-alternatives --install /usr/bin/javac javac /opt/jdk1.8.0_101/bin/javac 100&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="ubuntu" scheme="http://yoursite.com/tags/ubuntu/"/>
    
      <category term="update-alternatives" scheme="http://yoursite.com/tags/update-alternatives/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 12.04 生成桌面图标</title>
    <link href="http://yoursite.com/2016/11/15/make-ubutun-desktop/"/>
    <id>http://yoursite.com/2016/11/15/make-ubutun-desktop/</id>
    <published>2016-11-15T10:04:19.000Z</published>
    <updated>2017-05-25T03:41:18.234Z</updated>
    
    <content type="html"><![CDATA[<p>在Ubuntu上从网上下载压缩包版本（非.deb包）的应用程序之后，是不生成桌面图表的，比如网上下载的<a href="http://www.android-studio.org/" target="_blank" rel="external">Android Studio</a>, 所以需要自己做一个桌面图标。</p>
<ol>
<li><p>进入到/usr/share/applications/目录下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /usr/share/applications/</div></pre></td></tr></table></figure>
</li>
<li><p>新建一个android-studio.desktop文件。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim android-studio.desktop</div></pre></td></tr></table></figure>
</li>
</ol>
<a id="more"></a>
<ol>
<li>输入一下内容<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Version=2.2</div><div class="line">Name=Android Studio</div><div class="line">GenericName=Android IDE</div><div class="line">Comment=Android Development</div><div class="line">Exec=/home/yinlijun/android_toolchain/android-studio/bin/studio.sh %U</div><div class="line">Terminal=<span class="literal">false</span></div><div class="line">Icon=/home/yinlijun/android_toolchain/android-studio/bin/studio.png</div><div class="line">Type=Application</div><div class="line">Categories=Android;IDE;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>保存退出之后，在应用程序里面就可以找到，绑定了图标的应用程序，可以将其固定到启动器上。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Ubuntu上从网上下载压缩包版本（非.deb包）的应用程序之后，是不生成桌面图表的，比如网上下载的&lt;a href=&quot;http://www.android-studio.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Studio&lt;/a&gt;, 所以需要自己做一个桌面图标。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;进入到/usr/share/applications/目录下&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; /usr/share/applications/&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;新建一个android-studio.desktop文件。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;vim android-studio.desktop&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="ubuntu" scheme="http://yoursite.com/tags/ubuntu/"/>
    
      <category term="android studio" scheme="http://yoursite.com/tags/android-studio/"/>
    
  </entry>
  
  <entry>
    <title>git配置user.name和user.email</title>
    <link href="http://yoursite.com/2016/11/15/git%E9%85%8D%E7%BD%AEuser-name%E5%92%8Cuser-email/"/>
    <id>http://yoursite.com/2016/11/15/git配置user-name和user-email/</id>
    <published>2016-11-15T10:02:54.000Z</published>
    <updated>2017-05-25T03:41:18.234Z</updated>
    
    <content type="html"><![CDATA[<p>github在统计提交的时候，会判断邮箱是否跟github的登陆邮箱匹配，不匹配则不计算活跃度，即不生成小绿块。</p>
<p>获取配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">yinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.email</div><div class="line">aaa@aaa.com</div><div class="line">yinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.name</div><div class="line">aaa</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>设置当前仓库的user.name/user.email<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.email aaa</div><div class="line">yinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.email aaa@aaa.com</div></pre></td></tr></table></figure></p>
<p>设置全局user.name/user.email<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yinlijun@yinlijun:~/personal_github/johnny-blog$ git config --global user.name yinlijun</div><div class="line">yinlijun@yinlijun:~/personal_github/johnny-blog$ git config --global user.email yinlijun2004@gmail.com</div></pre></td></tr></table></figure></p>
<p>如果当前仓库未设置user.name/user.email则采用全局的user.name/user.email，否则当前仓库的user.name/user.email会覆盖全局的user.name/user.email。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;github在统计提交的时候，会判断邮箱是否跟github的登陆邮箱匹配，不匹配则不计算活跃度，即不生成小绿块。&lt;/p&gt;
&lt;p&gt;获取配置&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;yinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.email&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;aaa@aaa.com&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;yinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.name&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;aaa&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>windows配置mongdb记录</title>
    <link href="http://yoursite.com/2016/11/09/windows%E9%85%8D%E7%BD%AEmongdb%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2016/11/09/windows配置mongdb记录/</id>
    <published>2016-11-09T09:55:51.000Z</published>
    <updated>2017-05-25T03:41:18.237Z</updated>
    
    <content type="html"><![CDATA[<p>刚给windows电脑配置了mongdb记录一下。</p>
<ul>
<li><p>前往<a href="https://www.mongodb.com/download-center" target="_blank" rel="external">官网</a>下载合适的安装包，我选择的是msi安装包，也可以选择下载zip包。</p>
</li>
<li><p>运行msi安装包（默认安装在C盘，没找到在哪里可以修改盘符）。</p>
</li>
<li><p>在D:\下创建好相关文件夹<br><img src="http://img.blog.csdn.net/20161109194149759" alt="这里写图片描述"></p>
</li>
</ul>
<a id="more"></a>
<ul>
<li><p>打开命令提示符，进入到mongodb安装文件夹下的bin目录<br><img src="http://img.blog.csdn.net/20161109194331090" alt="这里写图片描述"></p>
</li>
<li><p>输入如下命令，注册MongoDB服务 </p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongod.exe --logpath D:\MongoDB\data\<span class="built_in">log</span>\MongoDB.log --logappend --dbpath D:\MongoDB\data\db --directoryperdb --storageEngin=mmappv1 --serviceName MongoDB --install</div></pre></td></tr></table></figure>
<p><img src="http://img.blog.csdn.net/20161109194436279" alt="这里写图片描述"></p>
<ul>
<li>启动MongoDB服务</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">net start MongoDB</div></pre></td></tr></table></figure>
<p><img src="http://img.blog.csdn.net/20161109194520874" alt="这里写图片描述"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刚给windows电脑配置了mongdb记录一下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;前往&lt;a href=&quot;https://www.mongodb.com/download-center&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官网&lt;/a&gt;下载合适的安装包，我选择的是msi安装包，也可以选择下载zip包。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;运行msi安装包（默认安装在C盘，没找到在哪里可以修改盘符）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在D:\下创建好相关文件夹&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20161109194149759&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="windows" scheme="http://yoursite.com/tags/windows/"/>
    
      <category term="mongodb" scheme="http://yoursite.com/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>windows下文件路径太深，无法删除解决办法</title>
    <link href="http://yoursite.com/2016/11/08/windows%E4%B8%8B%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84%E5%A4%AA%E6%B7%B1%EF%BC%8C%E6%97%A0%E6%B3%95%E5%88%A0%E9%99%A4%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://yoursite.com/2016/11/08/windows下文件路径太深，无法删除解决办法/</id>
    <published>2016-11-08T10:02:04.000Z</published>
    <updated>2017-05-25T03:41:18.237Z</updated>
    
    <content type="html"><![CDATA[<p>windows下npm开发时，有时候node_modules/下的目录嵌套太深，导致无法删除项目。</p>
<p>npm社区贡献了一个工具<a href="https://www.npmjs.com/package/windows-node-deps-deleter" target="_blank" rel="external">windows-node-deps-deleter</a>可供删除这样的目录。</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">E:\vscode&gt;npm install -g windows-node-deps-deleter</div><div class="line">C:\Users\xx\AppData\Roaming\npm\wnddel -&gt; C:\Users\xx\AppData\Roaming\npm\no</div><div class="line">de_modules\windows-node-deps-deleter\wnddel.js</div><div class="line">windows-node-deps-deleter@0.1.1 C:\Users\xx\AppData\Roaming\npm\node_modules\w</div><div class="line">indows-node-deps-deleter</div><div class="line">└── fs-extra@0.13.0 (ncp@1.0.1, jsonfile@2.4.0, rimraf@2.5.4)</div><div class="line"></div><div class="line">E:\vscode&gt;wnddel react-todo-list</div><div class="line">Deleting &quot;react-todo-list&quot; ...</div><div class="line">&quot;react-todo-list&quot; deleted.</div></pre></td></tr></table></figure>
<p>参考：<a href="https://www.npmjs.com/package/windows-node-deps-deleter#readme" target="_blank" rel="external">windows-node-deps-delete</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;windows下npm开发时，有时候node_modules/下的目录嵌套太深，导致无法删除项目。&lt;/p&gt;
&lt;p&gt;npm社区贡献了一个工具&lt;a href=&quot;https://www.npmjs.com/package/windows-node-deps-deleter&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;windows-node-deps-deleter&lt;/a&gt;可供删除这样的目录。&lt;/p&gt;
    
    </summary>
    
    
      <category term="windows" scheme="http://yoursite.com/tags/windows/"/>
    
      <category term="npm" scheme="http://yoursite.com/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>.gitignore无效，不能过滤某些文件</title>
    <link href="http://yoursite.com/2016/11/06/gitignore%E6%97%A0%E6%95%88%EF%BC%8C%E4%B8%8D%E8%83%BD%E8%BF%87%E6%BB%A4%E6%9F%90%E4%BA%9B%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2016/11/06/gitignore无效，不能过滤某些文件/</id>
    <published>2016-11-06T10:03:31.000Z</published>
    <updated>2017-05-25T03:41:18.233Z</updated>
    
    <content type="html"><![CDATA[<p>利用.gitignore过滤文件，如编译过程中的中间文件，等等，这些文件不需要被追踪管理。</p>
<p>现象：</p>
<p>在.gitignore添加file1文件，以过滤该文件，但是通过Git status查看仍显示file1文件的状态。</p>
<a id="more"></a>
<p>原因：</p>
<p>在git库中已存在了这个文件，之前push提交过该文件。</p>
<p>.gitignore文件只对还没有加入版本管理的文件起作用，如果之前已经用git把这些文件纳入了版本库，就不起作用了</p>
<p>解决：</p>
<p>需要在git库中删除该文件，并更新。</p>
<p>然后再次git status查看状态，file1文件不再显示状态。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;利用.gitignore过滤文件，如编译过程中的中间文件，等等，这些文件不需要被追踪管理。&lt;/p&gt;
&lt;p&gt;现象：&lt;/p&gt;
&lt;p&gt;在.gitignore添加file1文件，以过滤该文件，但是通过Git status查看仍显示file1文件的状态。&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term=".gitignore" scheme="http://yoursite.com/tags/gitignore/"/>
    
  </entry>
  
  <entry>
    <title>android studio编译错误: *** 目标模式不含有“%”。 停止。</title>
    <link href="http://yoursite.com/2016/11/05/android-studio%E7%BC%96%E8%AF%91%E9%94%99%E8%AF%AF-%E7%9B%AE%E6%A0%87%E6%A8%A1%E5%BC%8F%E4%B8%8D%E5%90%AB%E6%9C%89%E2%80%9C-%E2%80%9D%E3%80%82-%E5%81%9C%E6%AD%A2%E3%80%82/"/>
    <id>http://yoursite.com/2016/11/05/android-studio编译错误-目标模式不含有“-”。-停止。/</id>
    <published>2016-11-05T10:04:19.000Z</published>
    <updated>2017-05-25T03:41:18.232Z</updated>
    
    <content type="html"><![CDATA[<p>Android Studio NDK编译出现如下错误：<br><strong><em> target pattern contains no `%’. Stop<br>中文：
</em></strong> 目标模式不含有“%”。 停止。<br>可能是obj目录的问题，需要删掉。<br>在工程目录下find所有的obj目录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find . -name obj</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android Studio NDK编译出现如下错误：&lt;br&gt;&lt;strong&gt;&lt;em&gt; target pattern contains no `%’. Stop&lt;br&gt;中文：
&lt;/em&gt;&lt;/strong&gt; 目标模式不含有“%”。 停止。&lt;br&gt;可能是obj目录的问题，需要删
    
    </summary>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="android studio" scheme="http://yoursite.com/tags/android-studio/"/>
    
  </entry>
  
</feed>
